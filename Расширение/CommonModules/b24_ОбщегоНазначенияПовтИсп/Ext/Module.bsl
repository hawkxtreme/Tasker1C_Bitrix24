Функция ПолучитьСсылкуПоЗначениюРеквизитаОбъекта(ИмяОбъекта, ИмяРеквизита, ЗначениеРеквизита = Неопределено, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	ПолученноеЗначениеРеквизита = ЗначениеПоУмолчанию;
	
	Попытка
		
		Если ЗначениеЗаполнено(ИмяОбъекта) Тогда
			
			ЧастиИмениОбъекта = СтрРазделить(ИмяОбъекта, ".", Ложь);
			
			МенеджерыОбъектовМетаданных = ПолучитьСоответсвиеПоИменамМенеджеров();
			
			МенеджерОбъекта = МенеджерыОбъектовМетаданных[ВРег(ЧастиИмениОбъекта[0])][ЧастиИмениОбъекта[1]];
			
			Если ВРег(ЧастиИмениОбъекта[0]) = "ПЕРЕЧИСЛЕНИЯ" И ЗначениеЗаполнено(ИмяРеквизита) Тогда
				
				ПолученноеЗначениеРеквизита = МенеджерОбъекта[ИмяРеквизита];
				
			Иначе
				
				Если ВРег(ИмяРеквизита) = "УНИКАЛЬНЫЙИДЕНТИФИКАТОР" Тогда
					
					Идентификатор = ?(ТипЗнч(ЗначениеРеквизита) = Тип("УникальныйИдентификатор"), ЗначениеРеквизита, Новый УникальныйИдентификатор(ЗначениеРеквизита));
										
					СсылкаПоЗначению = МенеджерОбъекта.ПолучитьСсылку(Идентификатор);
					
					//Если ссылка не существует то проверка по запросу вернет значение по умолчанию
					ПолученноеЗначениеРеквизита = ПолучитьСсылкуПоЗначениюРеквизитаОбъекта(ИмяОбъекта, "Ссылка", СсылкаПоЗначению, ЗначениеПоУмолчанию);
					
				Иначе
					
					ИменаОбъектовМетаданных = ПолучитьСоответсвиеПоИменамОбъектов();
					
					ЧастиИмениОбъекта[0] = ИменаОбъектовМетаданных[ВРег(ЧастиИмениОбъекта[0])];
					
					ИмяОбъектаПодмена = СтрСоединить(ЧастиИмениОбъекта, ".");
					
					Запрос = Новый Запрос;
					Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ %1 ГДЕ %2 = &ЗначениеРеквизита", ИмяОбъектаПодмена, ИмяРеквизита);
					Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеРеквизита);
					РезультатЗапроса = Запрос.Выполнить();
					
					Если НЕ РезультатЗапроса.Пустой() Тогда
						Выборка = РезультатЗапроса.Выбрать();
						Выборка.Следующий();
						ПолученноеЗначениеРеквизита = Выборка.Ссылка;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		Сообщить("Ошибка получения ссылки по значению реквизита: " + ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат ПолученноеЗначениеРеквизита;
	
КонецФункции // ПолучитьСсылкуПоЗначениюРеквизита()

Функция ПолучитьСоответсвиеПоИменамМенеджеров() Экспорт

	МенеджерыОбъектовМетаданных = Новый Соответствие;
	МенеджерыОбъектовМетаданных.Вставить("СПРАВОЧНИКИ", Справочники);
	МенеджерыОбъектовМетаданных.Вставить("ПЕРЕЧИСЛЕНИЯ", Перечисления);
	МенеджерыОбъектовМетаданных.Вставить("ДОКУМЕНТЫ", Документы);
	МенеджерыОбъектовМетаданных.Вставить("ПЛАНЫВИДОВХАРАКТЕРИСТИК", ПланыВидовХарактеристик);
	МенеджерыОбъектовМетаданных.Вставить("ПЛАНЫСЧЕТОВ", ПланыСчетов);
	МенеджерыОбъектовМетаданных.Вставить("ПЛАНЫВИДОВРАСЧЕТА", ПланыВидовРасчета);
	МенеджерыОбъектовМетаданных.Вставить("БИЗНЕСПРОЦЕССЫ", БизнесПроцессы);
	МенеджерыОбъектовМетаданных.Вставить("ЗАДАЧИ", Задачи);
	
	МенеджерыОбъектовМетаданных.Вставить("СПРАВОЧНИК", Справочники);
	МенеджерыОбъектовМетаданных.Вставить("ПЕРЕЧИСЛЕНИЕ", Перечисления);
	МенеджерыОбъектовМетаданных.Вставить("ДОКУМЕНТ", Документы);
	МенеджерыОбъектовМетаданных.Вставить("ПЛАНВИДОВХАРАКТЕРИСТИК", ПланыВидовХарактеристик);
	МенеджерыОбъектовМетаданных.Вставить("ПЛАНСЧЕТОВ", ПланыСчетов);
	МенеджерыОбъектовМетаданных.Вставить("ПЛАНВИДОВРАСЧЕТА", ПланыВидовРасчета);
	МенеджерыОбъектовМетаданных.Вставить("БИЗНЕСПРОЦЕСС", БизнесПроцессы);
	МенеджерыОбъектовМетаданных.Вставить("ЗАДАЧА", Задачи);
	
	Возврат МенеджерыОбъектовМетаданных;

КонецФункции // ПолучитьСоответсвиеПоИменамМенеджеров()

Функция ПолучитьСоответсвиеПоИменамОбъектов() Экспорт

	ИменаОбъектовМетаданных = Новый Соответствие;
	ИменаОбъектовМетаданных.Вставить("СПРАВОЧНИКИ", "Справочник");
	ИменаОбъектовМетаданных.Вставить("ПЕРЕЧИСЛЕНИЯ", "Перечисление");
	ИменаОбъектовМетаданных.Вставить("ДОКУМЕНТЫ", "Документ");
	ИменаОбъектовМетаданных.Вставить("ПЛАНЫВИДОВХАРАКТЕРИСТИК", "ПланВидовХарактеристик");
	ИменаОбъектовМетаданных.Вставить("ПЛАНЫСЧЕТОВ", "ПланСчетов");
	ИменаОбъектовМетаданных.Вставить("ПЛАНЫВИДОВРАСЧЕТА", "ПланВидовРасчета");
	ИменаОбъектовМетаданных.Вставить("БИЗНЕСПРОЦЕССЫ", "БизнесПроцесс");
	ИменаОбъектовМетаданных.Вставить("ЗАДАЧИ", "Задача");
	
	ИменаОбъектовМетаданных.Вставить("СПРАВОЧНИК", "Справочник");
	ИменаОбъектовМетаданных.Вставить("ПЕРЕЧИСЛЕНИЕ", "Перечисление");
	ИменаОбъектовМетаданных.Вставить("ДОКУМЕНТ", "Документ");
	ИменаОбъектовМетаданных.Вставить("ПЛАНВИДОВХАРАКТЕРИСТИК", "ПланыВидовХарактеристик");
	ИменаОбъектовМетаданных.Вставить("ПЛАНСЧЕТОВ", "ПланСчетов");
	ИменаОбъектовМетаданных.Вставить("ПЛАНВИДОВРАСЧЕТА", "ПланВидовРасчета");
	ИменаОбъектовМетаданных.Вставить("БИЗНЕСПРОЦЕСС", "БизнесПроцесс");
	ИменаОбъектовМетаданных.Вставить("ЗАДАЧА", "Задача");
	
	Возврат ИменаОбъектовМетаданных;

КонецФункции // ПолучитьСоответсвиеПоИменамМенеджеров()

Функция ПредопределенныеЭлементыПолучитьЗначениеПоИмени(Имя, СообщитьОбОтсутствии = Ложь, ЗначениеПоУмолчанию = Неопределено) Экспорт 

	Возврат РегистрыСведений.b24_ПредопределенныеЭлементы.ПолучитьЗначениеПоИмени(Имя, СообщитьОбОтсутствии, ЗначениеПоУмолчанию);
	
КонецФункции

Функция ПредопределенныеЭлементыПолучитьМассивЗначенийПоИмени(Имя, СообщитьОбОтсутствии = Ложь) Экспорт 
	
	Возврат РегистрыСведений.b24_ПредопределенныеЭлементы.ПолучитьМассивЗначенийПоИмени(Имя, СообщитьОбОтсутствии);
	
КонецФункции

Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт

	Попытка
		ЗначениеКонстанты = Константы[ИмяКонстанты].Получить();
	Исключение
		ЗначениеКонстанты = ПредопределенныеЭлементыПолучитьЗначениеПоИмени(ИмяКонстанты, Ложь, Неопределено);
	КонецПопытки;
	
	Возврат ЗначениеКонстанты;

КонецФункции // ПолучитьЗначениеКонстанты()

Функция ПолучитьИмяПеречисленияПоЗначению(ЗначениеПеречисления) Экспорт

	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	Возврат ИмяЗначенияПеречисления;

КонецФункции // ПолучитьИмяПеречисленияПоСсылке()

Функция ПолучитьДлиннуНомераДокумента(ИмяДокумента) Экспорт
	
	Возврат Метаданные.Документы[ИмяДокумента].ДлинаНомера;

КонецФункции // ПолучитьДлиннуНомераДокумента()

Функция ПолучитьИдентификаторОбъекта(ПереданноеЗначение) Экспорт

	Возврат XMLСтрока(ПереданноеЗначение);

КонецФункции // ПолучитьИдентификаторОбъекта()
