	  	  
#Область Модуль_Общие

#Область app_info

Функция Получить_ИнформацияОПриложении(ПараметрыПодключения) Экспорт 
	
	Результат = Неопределено;
	
	Попытка
		
		ПараметрыПреобразованияJSON 								= b24_КоннекторHTTP.ПолучитьПараметрыПреобразованияJSONПоУмолчанию();
		ПараметрыПреобразованияJSON.ИменаСвойствСоЗначениямиДата 	= ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию();
		
		ВыполнитьЗадержку(ПараметрыПодключения);
		
		Адрес 		= СформироватьАдресСМетодом(ПараметрыПодключения, Метод_ИнформацияОПриложении());
		Результат 	= b24_КоннекторHTTP.КакJson(b24_КоннекторHTTP.Get(Адрес), ПараметрыПреобразованияJSON); 
		
		ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод_ИнформацияОПриложении());
		
	Исключение
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Получить_ИнформацияОПриложении", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат Результат
		
КонецФункции

Функция Метод_ИнформацияОПриложении()
	Возврат "app.info"
КонецФункции 

#КонецОбласти 

#КонецОбласти

#Область Модуль_Задачи 

#Область tasks_task_getFields

Функция Задачи_ВсеДоступныеПоля(ПараметрыПодключения) Экспорт 
	
	Данные = Неопределено;
	
	Попытка
		
		ВыполнитьЗадержку(ПараметрыПодключения);
		
		Адрес 		= СформироватьАдресСМетодом(ПараметрыПодключения, Метод_Задачи_ВсеДоступныеПоля());
		Результат 	= b24_APIПовтИсп.Задачи_ВсеДоступныеПоля(Адрес);  
		
		ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод_Задачи_ВсеДоступныеПоля());
		
		Если ДанныеУспешноПолучены(Результат) Тогда 
			
			СоответствиеНастройки		= Новый Соответствие();
			СоответствиеНастройки.Вставить("time", "СоответствиеВСтруктуру");
			СоответствиеНастройки.Вставить("result.fields", "СоответствиеВТаблицуЗначений");
			
			Данные	= ПреобразоватьВДанные(Результат, СоответствиеНастройки);
			
		Иначе 	
			
			Ошибка = ОписаниеОшибкиИзСервиса(Результат);
			ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ВсеДоступныеПоля", УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон("Не удалось выгрузить доступные поля. %1", Ошибка)); 
			
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ВсеДоступныеПоля", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Данные 
	
КонецФункции

Функция Получить_Задачи_МассивСвойствСоЗначениямиДатаДоступныеПоля(ПараметрыПодключения, Отказ)
	
	СтруктураДоступныхПолей 		= Задачи_ВсеДоступныеПоля(ПараметрыПодключения);
	МассивСвойствСоЗначениямиДата 	= ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию();	
	
	Если СтруктураДоступныхПолей <> Неопределено Тогда 
		Для Каждого Строка Из СтруктураДоступныхПолей.fields Цикл  
			Если Строка.type = "datetime" Тогда
				МассивСвойствСоЗначениямиДата.Добавить(СтрЗаменить(Строка.name, "_", ""));	
			КонецЕсли;                                     		
		КонецЦикла; 
	Иначе 
		Отказ = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСвойствСоЗначениямиДата);
	
	Возврат МассивСвойствСоЗначениямиДата
	
КонецФункции 

Процедура ДополнитьКэшМассивомСвойствСоЗначениямиДатаПоДоступнымПолям(Кэш, ПараметрыПодключения, Отказ)
	
	Если Не Кэш.Свойство("МассивСвойствСоЗначениямиДата") Тогда 
		
		МассивСвойствСоЗначениямиДата 	= Получить_Задачи_МассивСвойствСоЗначениямиДатаДоступныеПоля(ПараметрыПодключения, Отказ);
		Кэш.Вставить("МассивСвойствСоЗначениямиДата", МассивСвойствСоЗначениямиДата);
		
	КонецЕсли;
	
КонецПроцедуры

Функция Метод_Задачи_ВсеДоступныеПоля() Экспорт 
	Возврат "tasks.task.getFields"
КонецФункции

#КонецОбласти 

#Область task_item_userfield_getlist

Функция Задачи_ПользовательскиеПоля(ПараметрыПодключения) Экспорт 
	
	Данные = Неопределено;
	
	Попытка
		
		ВыполнитьЗадержку(ПараметрыПодключения);
		
		Адрес 		= СформироватьАдресСМетодом(ПараметрыПодключения, Метод_Задачи_ПользовательскиеПоля());
		Результат 	= b24_APIПовтИсп.Задачи_ПользовательскиеПоля(Адрес);  
		
		ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод_Задачи_ПользовательскиеПоля());
		
		Если ДанныеУспешноПолучены(Результат) Тогда 
			
			СоответствиеНастройки		= Новый Соответствие();
			СоответствиеНастройки.Вставить("time", "СоответствиеВСтруктуру");
			СоответствиеНастройки.Вставить("result", "МассивВТаблицуЗначений");
			
			Данные	= ПреобразоватьВДанные(Результат, СоответствиеНастройки);     
			
			Данные.result.Колонки.Добавить("TITLE");
			
			Для Каждого СтрокаСвойство Из Данные.result Цикл 
				
				ДанныеСвойства = Задачи_ПользовательскоеПоле(СтрокаСвойство.ID, ПараметрыПодключения);	
				
				Если ДанныеСвойства <> Неопределено
					И ДанныеСвойства.Свойство("result")
					И ДанныеСвойства.result.Количество() > 0
					И ДанныеСвойства.result.Свойство("EDIT_FORM_LABEL") Тогда 
					
					Заголовки 				= ДанныеСвойства.result.EDIT_FORM_LABEL;
					СтрокаСвойство.TITLE 	= Заголовки["ru"];
					
				КонецЕсли;
			КонецЦикла;
			
		Иначе 	
			
			Ошибка = ОписаниеОшибкиИзСервиса(Результат);
			ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ПользовательскиеПоля", УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон("Не удалось выгрузить доступные поля. %1", Ошибка)); 
			
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ПользовательскиеПоля", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Данные 
	
КонецФункции

Функция Метод_Задачи_ПользовательскиеПоля() Экспорт 
	Возврат "task.item.userfield.getlist"
КонецФункции

#КонецОбласти

#Область task_item_userfield_get

Функция Задачи_ПользовательскоеПоле(Идентификатор, ПараметрыПодключения) Экспорт 
	
	Данные = Неопределено;   
	
	Попытка
		
		ВыполнитьЗадержку(ПараметрыПодключения);
		
		//получаем параметры запроса
		СтруктураПараметры 		= ПолучитьСтруктураПараметры_Задачи_ПользовательскоеПоле(Идентификатор); 
		
		Адрес 		= СформироватьАдресСМетодом(ПараметрыПодключения, Метод_Задачи_ПользовательскоеПоле());
		Результат 	= b24_APIПовтИсп.Задачи_ПользовательскоеПоле(Адрес, СтруктураПараметры);  
		
		ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод_Задачи_ПользовательскоеПоле());
		
		Если ДанныеУспешноПолучены(Результат) Тогда 
			
			СоответствиеНастройки		= Новый Соответствие();
			СоответствиеНастройки.Вставить("time", "СоответствиеВСтруктуру");
			СоответствиеНастройки.Вставить("result", "СоответствиеВСтруктуру");
			
			Данные	= ПреобразоватьВДанные(Результат, СоответствиеНастройки);     
					
		Иначе 	
			
			Ошибка = ОписаниеОшибкиИзСервиса(Результат);
			ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ПользовательскоеПоле", УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон("Не удалось выгрузить доступные поля. %1", Ошибка)); 
			
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ПользовательскоеПоле", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Данные 
	
КонецФункции

Функция Метод_Задачи_ПользовательскоеПоле() Экспорт 
	Возврат "task.item.userfield.get"
КонецФункции

Функция ПолучитьСтруктураПараметры_Задачи_ПользовательскоеПоле(ID)

	Структура 	= Новый Структура();
	Структура.Вставить("ID", ID); 	
	
	Возврат Структура
	
КонецФункции

#КонецОбласти

#Область tasks_task_list

Функция Задачи_ВсеЗадачи(ПараметрыПодключения, Данные = Неопределено, КоличествоПропускаемыхЗаписей = 0, Кэш = Неопределено, Уровень = 1) Экспорт 
	 
	Отказ 				= Ложь;
	ДанныеДополнения 	= Неопределено;
	 
	Если Кэш = Неопределено Тогда 
		Кэш = Новый Структура();	
	КонецЕсли;
	
	//получаем список полей дат для преобразования 
	ДополнитьКэшМассивомСвойствСоЗначениямиДатаПоДоступнымПолям(Кэш, ПараметрыПодключения, Отказ);
	
	Если Не Отказ Тогда 
		
		Попытка
			
			//получаем дополнительные параметры
			Если Не Кэш.Свойство("ДополнительныеПараметры") Тогда 
				
				ПараметрыПреобразованияJSON 								= b24_КоннекторHTTP.ПолучитьПараметрыПреобразованияJSONПоУмолчанию();
				ПараметрыПреобразованияJSON.ИменаСвойствСоЗначениямиДата 	= ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию(); 
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);
				
				Кэш.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
				
			КонецЕсли;
			
			//получаем параметры запроса
			СтруктураПараметры 		= ПолучитьСтруктураПараметры_Задачи_ВсеЗадачи(, ПараметрыПодключения["ФильтрыЗадачи"], , , КоличествоПропускаемыхЗаписей); 
			Кэш.ДополнительныеПараметры.Вставить("Json", СтруктураПараметры); 
			
			ВыполнитьЗадержку(ПараметрыПодключения);
			
			//получаем данные по HTTP запросу
			Адрес 		= СформироватьАдресСМетодом(ПараметрыПодключения, Метод_Задачи_ВсеЗадачи());
			Результат 	= b24_КоннекторHTTP.PostJson(Адрес, СтруктураПараметры, Кэш.ДополнительныеПараметры); 
			
			ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод_Задачи_ВсеЗадачи());
			
			Если ДанныеУспешноПолучены(Результат) Тогда 
				
				//преобразуем в необходимые данные
				СоответствиеНастройки		= Новый Соответствие();
				СоответствиеНастройки.Вставить("time", "СоответствиеВСтруктуру");
				СоответствиеНастройки.Вставить("result.tasks", "МассивВТаблицуЗначений");
				
				ДанныеДополнения = ПреобразоватьВДанные(Результат, СоответствиеНастройки, Кэш.ДополнительныеПараметры.ПараметрыПреобразованияJSON, Кэш.МассивСвойствСоЗначениямиДата);
				
				Если Данные = Неопределено Тогда 
					Данные = ДанныеДополнения;
				Иначе 
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДополнения.tasks, Данные.tasks); 
				КонецЕсли;
				
				//дополняем в случае постраничного обхода
				Если ДанныеДополнения.Свойство("next")
					И ДанныеДополнения.Свойство("total") Тогда 
					
					next 	= ДанныеДополнения.next; 
					total 	= ДанныеДополнения.total; 
					
					Пока next < total
						И Уровень = 1 Цикл   
						
						ДанныеДополнения = Задачи_ВсеЗадачи(ПараметрыПодключения, Данные, next, Кэш, Уровень + 1); 
						
						Если ДанныеДополнения <> Неопределено Тогда 
							Если ДанныеДополнения.Свойство("next") Тогда 
								next = ДанныеДополнения.next;
							Иначе 
								next 				= ДанныеДополнения.total;
								ДанныеДополнения 	= Данные;
							КонецЕсли;
						Иначе 
							next = total;
						КонецЕсли;
						
					КонецЦикла;	
				КонецЕсли;
				
			Иначе 	
				
				Ошибка = ОписаниеОшибкиИзСервиса(Результат);
				ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ВсеЗадачи", УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон("Не удалось выгрузить задачи. %1", Ошибка)); 
				
			КонецЕсли;
			
		Исключение
			ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ВсеЗадачи", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;  
		
	КонецЕсли;

	Возврат ДанныеДополнения
	
КонецФункции  

Функция Задачи_ВсеЗадачиПользовательскиеПоля(ПараметрыПодключения) Экспорт 

	МассивСвойств 	= Новый Массив; 
	Соотвествие		= Новый Соответствие;
	
	Для Каждого СтрокаПользовательскоеПоле Из ПараметрыПодключения["ПользовательскиеПоляЗадачи"] Цикл 
		
		ВидСравненияФильтра 	= Неопределено;  
		ЗначениеФильтра 		= Неопределено;
		
		МасивПолей = Новый Массив;
		МасивПолей.Добавить(СтрокаПользовательскоеПоле.Ключ);
		
		ДанныеСвойства = Новый Структура;
		ДанныеСвойства.Вставить("ФильтрыЗадачи", ПараметрыПодключения["ФильтрыЗадачи"]);
		ДанныеСвойства.Вставить("Поля", МасивПолей);
		
		Если СтрокаПользовательскоеПоле.Значение.Тип = "double" Тогда 
			
			ВидСравненияФильтра	= Перечисления.b24_ВидСравнения.БольшеЛибоРавно; 
			ЗначениеФильтра 	= 0; 
			
		ИначеЕсли СтрокаПользовательскоеПоле.Значение.Тип = "string" Тогда 
			
			ВидСравненияФильтра	= Перечисления.b24_ВидСравнения.НеРавно; 
			ЗначениеФильтра 	= "";
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ВидСравнения) Тогда 
			
			НоваяСтрока 				= ДанныеСвойства.ФильтрыЗадачи.Добавить();
			НоваяСтрока.Ключ 			= СтрокаПользовательскоеПоле.Ключ;
			НоваяСтрока.Значение 		= ЗначениеФильтра;
			НоваяСтрока.ВидСравнения 	= ВидСравненияФильтра;
			
		КонецЕсли;    
		
		Результат = Задачи_ВсеЗадачиПользовательскоеПоле(ПараметрыПодключения, ДанныеСвойства); 
		
		МассивСвойств.Добавить(Новый Структура("Свойство, Тип, Результат", СтрокаПользовательскоеПоле.Ключ, СтрокаПользовательскоеПоле.Значение.Тип, Результат));
		
	КонецЦикла; 
	
	//переместим в соответствие
	Для Каждого Свойство Из МассивСвойств Цикл 

		ТаблицаСвойство = Свойство.Результат.tasks;  
		
		Если ТаблицаСвойство.Колонки.Количество() = 3 Тогда //id, group, наше поле
			
			ИмяКолонки = "";
			
			Для Каждого СтрокаКолонка Из ТаблицаСвойство.Колонки Цикл 
				
				Если СтрокаКолонка.Имя <> "id"
					И СтрокаКолонка.Имя <> "group" Тогда 
					ИмяКолонки = СтрокаКолонка.Имя;	
				КонецЕсли;
			КонецЦикла; 
			
			Если ЗначениеЗаполнено(ИмяКолонки) Тогда 
				Для Каждого СтрокаСвойство Из ТаблицаСвойство Цикл 
					
					ДанныеСтроки = Соотвествие[СтрокаСвойство.id];
					
					Если ДанныеСтроки = Неопределено Тогда 
						ДанныеСтроки = Новый Структура;	
					КонецЕсли; 
					
					Если Свойство.Тип = "double" Тогда  
						Попытка
							ЗначениеСвойства = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаСвойство[ИмяКолонки]);
						Исключение
							ЗначениеСвойства = 0;
						КонецПопытки;
					Иначе 
						ЗначениеСвойства = СтрокаСвойство[ИмяКолонки];		
					КонецЕсли;
					
					ДанныеСтроки.Вставить(Свойство.Свойство, ЗначениеСвойства);
					
					Соотвествие[СтрокаСвойство.id] = ДанныеСтроки;	
					
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	   
		
	Возврат Соотвествие
	
КонецФункции

Функция Задачи_ВсеЗадачиПользовательскоеПоле(ПараметрыПодключения, ДанныеСвойства, Данные = Неопределено, КоличествоПропускаемыхЗаписей = 0, Кэш = Неопределено, Уровень = 1) Экспорт 
	 
	Отказ 				= Ложь;
	ДанныеДополнения 	= Неопределено;
	 
	Если Кэш = Неопределено Тогда 
		Кэш = Новый Структура();	
	КонецЕсли;
	
	//получаем список полей дат для преобразования 
	ДополнитьКэшМассивомСвойствСоЗначениямиДатаПоДоступнымПолям(Кэш, ПараметрыПодключения, Отказ);
	
	Если Не Отказ Тогда 
		
		Попытка
			
			//получаем дополнительные параметры
			Если Не Кэш.Свойство("ДополнительныеПараметры") Тогда 
				
				ПараметрыПреобразованияJSON 								= b24_КоннекторHTTP.ПолучитьПараметрыПреобразованияJSONПоУмолчанию();
				ПараметрыПреобразованияJSON.ИменаСвойствСоЗначениямиДата 	= ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию(); 
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);
				
				Кэш.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
				
			КонецЕсли;
			
			//получаем параметры запроса
			СтруктураПараметры 		= ПолучитьСтруктураПараметры_Задачи_ВсеЗадачи(, ДанныеСвойства.ФильтрыЗадачи, ДанныеСвойства.Поля, , КоличествоПропускаемыхЗаписей); 
			Кэш.ДополнительныеПараметры.Вставить("Json", СтруктураПараметры); 
			
			ВыполнитьЗадержку(ПараметрыПодключения);
			
			//получаем данные по HTTP запросу
			Адрес 		= СформироватьАдресСМетодом(ПараметрыПодключения, Метод_Задачи_ВсеЗадачи());
			Результат 	= b24_КоннекторHTTP.PostJson(Адрес, СтруктураПараметры, Кэш.ДополнительныеПараметры); 
			
			ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод_Задачи_ВсеЗадачи());
			
			Если ДанныеУспешноПолучены(Результат) Тогда 
				
				//преобразуем в необходимые данные
				СоответствиеНастройки		= Новый Соответствие();
				СоответствиеНастройки.Вставить("time", "СоответствиеВСтруктуру");
				СоответствиеНастройки.Вставить("result.tasks", "МассивВТаблицуЗначений");
				
				ДанныеДополнения = ПреобразоватьВДанные(Результат, СоответствиеНастройки, Кэш.ДополнительныеПараметры.ПараметрыПреобразованияJSON, Кэш.МассивСвойствСоЗначениямиДата);
				
				Если Данные = Неопределено Тогда 
					Данные = ДанныеДополнения;
				Иначе 
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДополнения.tasks, Данные.tasks); 
				КонецЕсли;
				
				//дополняем в случае постраничного обхода
				Если ДанныеДополнения.Свойство("next")
					И ДанныеДополнения.Свойство("total") Тогда 
					
					next 	= ДанныеДополнения.next; 
					total 	= ДанныеДополнения.total; 
					
					Пока next < total
						И Уровень = 1 Цикл   
						
						ДанныеДополнения = Задачи_ВсеЗадачиПользовательскоеПоле(ПараметрыПодключения, ДанныеСвойства, Данные, next, Кэш, Уровень + 1); 
						
						Если ДанныеДополнения <> Неопределено Тогда 
							Если ДанныеДополнения.Свойство("next") Тогда 
								next = ДанныеДополнения.next;
							Иначе 
								next 				= ДанныеДополнения.total;
								ДанныеДополнения 	= Данные;
							КонецЕсли;
						Иначе 
							next = total;
						КонецЕсли;
						
					КонецЦикла;	
				КонецЕсли;
				
			Иначе 	
				
				Ошибка = ОписаниеОшибкиИзСервиса(Результат);
				ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ВсеЗадачи", УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон("Не удалось выгрузить задачи. %1", Ошибка)); 
				
			КонецЕсли;
			
		Исключение
			ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ВсеЗадачи", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;  
		
	КонецЕсли;

	Возврат ДанныеДополнения
	
КонецФункции  

Функция ПолучитьСтруктураПараметры_Задачи_ВсеЗадачи(order = Неопределено, filter = Неопределено, select = Неопределено, limit = 50, start = 0)

	Структура 	= Новый Структура();
	
	Если filter <> Неопределено
		И filter.Количество() > 0 Тогда 
		
		СоответствиеFilter = Новый Соответствие(); 
		
		Для Каждого Строка Из filter Цикл 
			
			КлючФильтра			= Строка.Ключ;
			ЕстьВидСравнения	= ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Строка, "ВидСравнения");
			
			Если ЕстьВидСравнения
				И ЗначениеЗаполнено(Строка.ВидСравнения) Тогда 
				
				ЗнакСравнения					= "";
				ИндексПеречисления 				= Перечисления.b24_ВидСравнения.Индекс(Строка.ВидСравнения);
				МетаданныеЗначенияПеречисления 	= Метаданные.Перечисления.b24_ВидСравнения.ЗначенияПеречисления[ИндексПеречисления];
				
				Если МетаданныеЗначенияПеречисления <> Неопределено Тогда 
					ЗнакСравнения = МетаданныеЗначенияПеречисления.Комментарий; 
				КонецЕсли;                                                     			
				
				КлючФильтра = СтрШаблон("%1%2", ЗнакСравнения, КлючФильтра);
				
			КонецЕсли;			
			
			СоответствиеFilter.Вставить(КлючФильтра, Строка.Значение);
			
		КонецЦикла;
		
		Структура.Вставить("filter", СоответствиеFilter); 
		
	КонецЕсли;  
	
	Если select <> Неопределено
		И select.Количество() > 0 Тогда 
		Структура.Вставить("select", select);
	КонецЕсли;	
		
	Если limit <> 50 Тогда 
		Структура.Вставить("limit", limit); 	
	КонецЕсли;
	
	Если start <> 0 Тогда 
		Структура.Вставить("start", start); 	
	КонецЕсли;	
		
	Возврат Структура
	
КонецФункции

 Функция Метод_Задачи_ВсеЗадачи()
	Возврат "tasks.task.list"
КонецФункции

#КонецОбласти 

#Область task_item_getfiles

Функция Задачи_ПолучитьФайлыЗадачи(TASKID, GUID, ПараметрыПодключения, Кэш = Неопределено) Экспорт 
	
	Данные = Неопределено;
	
	Если Кэш = Неопределено Тогда 
		Кэш = Новый Структура();	
	КонецЕсли;  
	
	//получаем список полей дат для преобразования
	Если Не Кэш.Свойство("МассивСвойствСоЗначениямиДата") Тогда 
		Кэш.Вставить("МассивСвойствСоЗначениямиДата", ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию());
	КонецЕсли; 
	
	Попытка
		
		//получаем дополнительные параметры
		Если Не Кэш.Свойство("ДополнительныеПараметры") Тогда 
			
			ПараметрыПреобразованияJSON 								= b24_КоннекторHTTP.ПолучитьПараметрыПреобразованияJSONПоУмолчанию();
			ПараметрыПреобразованияJSON.ИменаСвойствСоЗначениямиДата 	= ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию(); 
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);
			
			Кэш.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			
		КонецЕсли;
		
		//получаем параметры запроса
		СтруктураПараметры 		= ПолучитьСтруктураПараметры_Задачи_ЗадачаПоID(TASKID); 
		Кэш.ДополнительныеПараметры.Вставить("Json", СтруктураПараметры); 
		
		ВыполнитьЗадержку(ПараметрыПодключения);
		
		//получаем данные по HTTP запросу
		Адрес 		= СформироватьАдресСМетодом(ПараметрыПодключения, Метод_Задачи_ПолучитьФайлыЗадачи());
		Результат 	= b24_КоннекторHTTP.PostJson(Адрес, СтруктураПараметры, Кэш.ДополнительныеПараметры); 
		
		ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод_Задачи_ПолучитьФайлыЗадачи());
		
		Если ДанныеУспешноПолучены(Результат) Тогда 
			
			//преобразуем в необходимые данные
			СоответствиеНастройки		= Новый Соответствие();
			СоответствиеНастройки.Вставить("time", "СоответствиеВСтруктуру");
			СоответствиеНастройки.Вставить("result", "МассивВТаблицуЗначений");
			
			Данные = ПреобразоватьВДанные(Результат, СоответствиеНастройки, Кэш.ДополнительныеПараметры.ПараметрыПреобразованияJSON, Кэш.МассивСвойствСоЗначениямиДата);    
			ОтфильтроватьУжеЗагруженныеФайлы(GUID, Данные.result);
			Данные.result.Колонки.Добавить("Данные");
			
			Для Каждого Строка Из Данные.result Цикл 
				
				Адрес 			= СформироватьАдресПолученияДанных(ПараметрыПодключения, Строка.DOWNLOAD_URL); 
				Результат 		= b24_КоннекторHTTP.КакДвоичныеДанные(b24_КоннекторHTTP.Get(Адрес)); 
				Строка.Данные 	= Результат; 
				
			КонецЦикла; 
			
			Данные = Данные.result;
			
		Иначе 
			
			Ошибка = ОписаниеОшибкиИзСервиса(Результат);
			ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ПолучитьФайлыЗадачи", УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон("Не удалось выгрузить файлы задачи. %1", Ошибка)); 
			
		КонецЕсли;  
		
	Исключение
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ПолучитьФайлыЗадачи", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Данные
	
КонецФункции 

Процедура ОтфильтроватьУжеЗагруженныеФайлы(Знач GUID, ТаблицаФайлов)
	
	GUID 			= b24_Интеграция.ПолучитьGUID(GUID);
	Задача 			= Справочники.узЗадачи.ПолучитьСсылку(GUID);    
	МассивУдаления 	= Новый Массив;
	
	Если ОбщегоНазначения.СсылкаСуществует(Задача)
		И ТаблицаФайлов.Количество() > 0 Тогда 
		
		ТипыВладельцев = Метаданные.РегистрыСведений.НаличиеФайлов.Измерения.ОбъектСФайлами.Тип.Типы();
		
		Если ТипыВладельцев.Найти(ТипЗнч(Задача)) <> Неопределено Тогда
			
			МассивФайловЛокальный = РаботаСФайламиСлужебный.ВсеПодчиненныеФайлы(Задача); 
			
			Для Каждого СсылкаНаФайл Из МассивФайловЛокальный Цикл 
				
				ДанныеПрисоединенногоФайла 	= РаботаСФайлами.ДанныеФайла(СсылкаНаФайл);
				
				Отбор 			= Новый Структура("NAME, SIZE", ДанныеПрисоединенногоФайла.ИмяФайла, Формат(ДанныеПрисоединенногоФайла.Размер, "ЧГ=0"));
				ИскомыеСтроки 	= ТаблицаФайлов.НайтиСтроки(Отбор); 
				
				Для Каждого ИскомаяСтрока Из ИскомыеСтроки Цикл 
					МассивУдаления.Добавить(ИскомаяСтрока);	
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 
	
	Для Каждого СтрокаУдаления Из МассивУдаления Цикл 
		ТаблицаФайлов.Удалить(СтрокаУдаления);	
	КонецЦикла;
	
КонецПроцедуры

Функция Метод_Задачи_ПолучитьФайлыЗадачи()
	Возврат "task.item.getfiles"
КонецФункции

#КонецОбласти 

#Область tasks_task_get

Функция Задачи_ПолучитьЗадачу(TASKID, ПараметрыПодключения, Кэш = Неопределено) Экспорт 
	
	Отказ 		= Ложь;
	Результат 	= Неопределено;
	
	Если Кэш = Неопределено Тогда 
		Кэш = Новый Структура();	
	КонецЕсли;  
	
	//получаем список полей дат для преобразования
	ДополнитьКэшМассивомСвойствСоЗначениямиДатаПоДоступнымПолям(Кэш, ПараметрыПодключения, Отказ);
	
	Попытка
		
		//получаем дополнительные параметры
		Если Не Кэш.Свойство("ДополнительныеПараметры") Тогда 
			
			ПараметрыПреобразованияJSON 								= b24_КоннекторHTTP.ПолучитьПараметрыПреобразованияJSONПоУмолчанию();
			ПараметрыПреобразованияJSON.ИменаСвойствСоЗначениямиДата 	= ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию(); 
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);
			
			Кэш.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			
		КонецЕсли;
		
		//получаем параметры запроса
		СтруктураПараметры 		= ПолучитьСтруктураПараметры_Задачи_ЗадачаПоID_НижнийРегистр(TASKID); 
		Кэш.ДополнительныеПараметры.Вставить("Json", СтруктураПараметры); 
		
		ВыполнитьЗадержку(ПараметрыПодключения);
		
		//получаем данные по HTTP запросу
		Адрес 	= СформироватьАдресСМетодом(ПараметрыПодключения, Метод_Задачи_ПолучитьЗадачу());
		Ответ	= b24_КоннекторHTTP.PostJson(Адрес, СтруктураПараметры, Кэш.ДополнительныеПараметры); 
		
		ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод_Задачи_ПолучитьЗадачу());
		
		//преобразуем в необходимые данные
		Если ДанныеУспешноПолучены(Ответ) Тогда 
			
			СоответствиеНастройки		= Новый Соответствие();
			СоответствиеНастройки.Вставить("time", "СоответствиеВСтруктуру");
			СоответствиеНастройки.Вставить("result", "СоответствиеВТаблицуЗначений");
			
			ДанныеПреобразования = ПреобразоватьВДанные(Ответ, СоответствиеНастройки, Кэш.ДополнительныеПараметры.ПараметрыПреобразованияJSON, Кэш.МассивСвойствСоЗначениямиДата);  
			
			Если ДанныеПреобразования.Свойство("result")
				И ДанныеПреобразования.result.Количество() > 0 Тогда 
				
				Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеПреобразования.result[0]);
				
			КонецЕсли;
			
		Иначе 
			
			Ошибка = ОписаниеОшибкиИзСервиса(Ответ);
			ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ПолучитьЗадачу", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.узЗадачи, TASKID, СтрШаблон("Не удалось получить задачу. %1", Ошибка)); 

		КонецЕсли;
		
	Исключение  
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ПолучитьЗадачу", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат
	
КонецФункции 

Функция Метод_Задачи_ПолучитьЗадачу()
	Возврат "tasks.task.get"
КонецФункции

#КонецОбласти 

#Область tasks_task_add

Функция Задачи_ДобавитьЗадачу(Данные, ПараметрыПодключения, Кэш = Неопределено) Экспорт 
	
	Отказ		= Ложь;
	Результат 	= Новый Структура("Данные, ЗадачаВыгружена");  
	
	Если Кэш = Неопределено Тогда 
		Кэш = Новый Структура();	
	КонецЕсли;  
	
	//получаем список полей дат для преобразования 
	ДополнитьКэшМассивомСвойствСоЗначениямиДатаПоДоступнымПолям(Кэш, ПараметрыПодключения, Отказ);
	
	Попытка  
		
		//получаем дополнительные параметры
		Если Не Кэш.Свойство("ДополнительныеПараметры") Тогда 
			
			ПараметрыПреобразованияJSON 								= b24_КоннекторHTTP.ПолучитьПараметрыПреобразованияJSONПоУмолчанию();
			ПараметрыПреобразованияJSON.ИменаСвойствСоЗначениямиДата 	= ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию(); 
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);
			
			Кэш.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			
		КонецЕсли;
		
		Если Данные.Количество() > 0 Тогда 
			
			//получаем параметры запроса
			СтруктураПараметры 		= ПолучитьСтруктураПараметры_Задачи_ДобавлениеЗадачи(Данные); 
			Кэш.ДополнительныеПараметры.Вставить("Json", СтруктураПараметры); 
			
			ВыполнитьЗадержку(ПараметрыПодключения);
			
			//получаем данные по HTTP запросу
			Адрес 	= СформироватьАдресСМетодом(ПараметрыПодключения, Метод_Задачи_ДобавитьЗадачу());
			Ответ	= b24_КоннекторHTTP.PostJson(Адрес, СтруктураПараметры, Кэш.ДополнительныеПараметры); 
			
			ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод_Задачи_ДобавитьЗадачу());
			
			//преобразуем в необходимые данные  
			Если ДанныеУспешноПолучены(Ответ) Тогда 
				
				СоответствиеНастройки		= Новый Соответствие();
				СоответствиеНастройки.Вставить("time", "СоответствиеВСтруктуру");
				СоответствиеНастройки.Вставить("result", "СоответствиеВТаблицуЗначений");
				
				ДанныеПреобразования = ПреобразоватьВДанные(Ответ, СоответствиеНастройки, Кэш.ДополнительныеПараметры.ПараметрыПреобразованияJSON, Кэш.МассивСвойствСоЗначениямиДата);  
				
				Если ДанныеПреобразования.Свойство("result")
					И ДанныеПреобразования.result.Количество() > 0 Тогда 
					
					Результат.Данные 			= ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеПреобразования.result[0]);
					Результат.ЗадачаВыгружена	= Истина;
					
				КонецЕсли;
				
			Иначе 
				
				Отказ = Истина;
				Ошибка = ОписаниеОшибкиИзСервиса(Ответ);
				ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ДобавитьЗадачу", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.узЗадачи, Данные.TITLE, СтрШаблон("Не удалось обновить задачу. %1", Ошибка)); 
				
			КонецЕсли;
		КонецЕсли;
		
	Исключение 
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ДобавитьЗадачу", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат
	
КонецФункции 

Функция ПолучитьСтруктураПараметры_Задачи_ДобавлениеЗадачи(Данные)
	
	Структура = Новый Структура(); 
	Структура.Вставить("fields", Данные);
	
	Возврат Структура
	
КонецФункции

Функция Метод_Задачи_ДобавитьЗадачу()
	Возврат "tasks.task.add"
КонецФункции

#КонецОбласти  

#Область tasks_task_delete

Функция Задачи_УдалитьЗадачу(TASKID, ПараметрыПодключения, Кэш = Неопределено) Экспорт 
	
	Отказ		= Ложь;
	Результат 	= Ложь;  
	
	Если Кэш = Неопределено Тогда 
		Кэш = Новый Структура();	
	КонецЕсли;  
	
	//получаем список полей дат для преобразования 
	ДополнитьКэшМассивомСвойствСоЗначениямиДатаПоДоступнымПолям(Кэш, ПараметрыПодключения, Отказ);
	
	Попытка
		
		//получаем дополнительные параметры
		Если Не Кэш.Свойство("ДополнительныеПараметры") Тогда 
			
			ПараметрыПреобразованияJSON 								= b24_КоннекторHTTP.ПолучитьПараметрыПреобразованияJSONПоУмолчанию();
			ПараметрыПреобразованияJSON.ИменаСвойствСоЗначениямиДата 	= ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию(); 
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);
			
			Кэш.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			
		КонецЕсли;
		
		//получаем параметры запроса  
		СтруктураПараметры 		= ПолучитьСтруктураПараметры_Задачи_ЗадачаПоID_НижнийРегистр(TASKID);
		Кэш.ДополнительныеПараметры.Вставить("Json", СтруктураПараметры); 
		
		ВыполнитьЗадержку(ПараметрыПодключения);
		
		//получаем данные по HTTP запросу
		Адрес 	= СформироватьАдресСМетодом(ПараметрыПодключения, Метод_Задачи_УдалитьЗадачу());
		Ответ	= b24_КоннекторHTTP.PostJson(Адрес, СтруктураПараметры, Кэш.ДополнительныеПараметры);  
		
		ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод_Задачи_УдалитьЗадачу());
		
		//преобразуем в необходимые данные  
		Если ДанныеУспешноПолучены(Ответ) Тогда  
			
			СоответствиеНастройки		= Новый Соответствие();
			СоответствиеНастройки.Вставить("time", "СоответствиеВСтруктуру");
			СоответствиеНастройки.Вставить("result", "СоответствиеВСтруктуру");
			
			ДанныеПреобразования = ПреобразоватьВДанные(Ответ, СоответствиеНастройки, Кэш.ДополнительныеПараметры.ПараметрыПреобразованияJSON, Кэш.МассивСвойствСоЗначениямиДата);  
			
			Если ДанныеПреобразования.Свойство("result")
				И ДанныеПреобразования.result.Количество() > 0 Тогда 
				
				Результат = ДанныеПреобразования.result.task;
				
			КонецЕсли; 
			
			Если Не Результат Тогда 
				Отказ = Истина;
				ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_УдалитьЗадачу", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.узЗадачи, TASKID, СтрШаблон("Не удалось удалить задачу - %1", TASKID)); 
			КонецЕсли;
			
		Иначе 
			
			Отказ = Истина;
			Ошибка = ОписаниеОшибкиИзСервиса(Ответ);
			ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_УдалитьЗадачу", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.узЗадачи, TASKID, СтрШаблон("Не удалось обновить задачу. %1", Ошибка)); 
			
		КонецЕсли;		
		
	Исключение 
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_УдалитьЗадачу", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
	КонецПопытки;
	
	Возврат Результат
	
КонецФункции

Функция Метод_Задачи_УдалитьЗадачу()
	Возврат "tasks.task.delete"
КонецФункции

#КонецОбласти  

#Область tasks_task_update

Функция Задачи_ОбновитьЗадачу(TASKID, Данные, ВозобновитьЗадачу = Ложь, ПараметрыПодключения, Кэш = Неопределено) Экспорт 
	
	Отказ					= Ложь;
	Результат 				= Неопределено;
	ТребуетсяОбновитьСтатус = Ложь;  
	Статус					= Данные["status"];
	
	Если Статус <> Неопределено Тогда 
		Данные.Удалить("status");
	КонецЕсли;
	
	Если Кэш = Неопределено Тогда 
		Кэш = Новый Структура();	
	КонецЕсли;  
	
	//получаем список полей дат для преобразования 
	ДополнитьКэшМассивомСвойствСоЗначениямиДатаПоДоступнымПолям(Кэш, ПараметрыПодключения, Отказ);
	
	Попытка
		
		//получаем дополнительные параметры
		Если Не Кэш.Свойство("ДополнительныеПараметры") Тогда 
			
			ПараметрыПреобразованияJSON 								= b24_КоннекторHTTP.ПолучитьПараметрыПреобразованияJSONПоУмолчанию();
			ПараметрыПреобразованияJSON.ИменаСвойствСоЗначениямиДата 	= ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию(); 
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);
			
			Кэш.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			
		КонецЕсли;
		
		Если Данные.Количество() > 0 Тогда 
			
			//получаем параметры запроса
			СтруктураПараметры 		= ПолучитьСтруктураПараметры_Задачи_ОбновлениеЗадачи(TASKID, Данные); 
			Кэш.ДополнительныеПараметры.Вставить("Json", СтруктураПараметры); 
			
			ВыполнитьЗадержку(ПараметрыПодключения);
			
			//получаем данные по HTTP запросу
			Адрес 	= СформироватьАдресСМетодом(ПараметрыПодключения, Метод_Задачи_ОбновитьЗадачу());
			Ответ	= b24_КоннекторHTTP.PostJson(Адрес, СтруктураПараметры, Кэш.ДополнительныеПараметры); 
			
			ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод_Задачи_ОбновитьЗадачу());
			
			//преобразуем в необходимые данные  
			Если ДанныеУспешноПолучены(Ответ) Тогда 
				
				СоответствиеНастройки		= Новый Соответствие();
				СоответствиеНастройки.Вставить("time", "СоответствиеВСтруктуру");
				СоответствиеНастройки.Вставить("result", "СоответствиеВТаблицуЗначений");
				
				ДанныеПреобразования = ПреобразоватьВДанные(Ответ, СоответствиеНастройки, Кэш.ДополнительныеПараметры.ПараметрыПреобразованияJSON, Кэш.МассивСвойствСоЗначениямиДата);  
				
				Если ДанныеПреобразования.Свойство("result")
					И ДанныеПреобразования.result.Количество() > 0 Тогда 
					
					Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеПреобразования.result[0]);
					
				КонецЕсли;
				
			Иначе 
				
				Отказ = Истина;
				Ошибка = ОписаниеОшибкиИзСервиса(Ответ);
				ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ОбновитьЗадачу", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.узЗадачи, TASKID, СтрШаблон("Не удалось обновить задачу. %1", Ошибка)); 
				
			КонецЕсли;
			
		Иначе 	
			Ответ = Новый Соответствие;	
		КонецЕсли;
		
		//статус не обновляется через update, требуется обновить через соотвествующий метод 
		Если (Данные.Количество() > 0 
			И Ответ["result"] <> Неопределено
			И Статус <> Неопределено)
			ИЛИ (Данные.Количество() = 0
			И Статус <> Неопределено) Тогда
			
			ТребуетсяОбновитьСтатус = Истина; 
			
		КонецЕсли;
		
		Если ТребуетсяОбновитьСтатус Тогда 
			Результат = Задачи_ОбновитьСтатусЗадачи(TASKID, Статус, ВозобновитьЗадачу, ПараметрыПодключения, Кэш);	
		КонецЕсли; 
		
	Исключение 
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ОбновитьЗадачу", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат

КонецФункции 

Функция Задачи_ОбновитьСтатусЗадачи(TASKID, ЧисловоеЗначениеСтатуса, ВозобновитьЗадачу = Ложь, ПараметрыПодключения, Кэш = Неопределено) Экспорт 
	
	Отказ		= Ложь;
	Результат 	= Неопределено;
	
	Если Кэш = Неопределено Тогда 
		Кэш = Новый Структура();	
	КонецЕсли;  
	
	//получаем список полей дат для преобразования
	ДополнитьКэшМассивомСвойствСоЗначениямиДатаПоДоступнымПолям(Кэш, ПараметрыПодключения, Отказ);
	
	Попытка
		
		//получаем дополнительные параметры
		Если Не Кэш.Свойство("ДополнительныеПараметры") Тогда 
			
			ПараметрыПреобразованияJSON 								= b24_КоннекторHTTP.ПолучитьПараметрыПреобразованияJSONПоУмолчанию();
			ПараметрыПреобразованияJSON.ИменаСвойствСоЗначениямиДата 	= ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию(); 
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);
			
			Кэш.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			
		КонецЕсли;   
		
		//получаем параметры запроса
		СтруктураПараметры 		= ПолучитьСтруктураПараметры_Задачи_ЗадачаПоID_НижнийРегистр(TASKID); 
		Кэш.ДополнительныеПараметры.Вставить("Json", СтруктураПараметры); 
		
		//получаем данные по HTTP запросу  
		Метод = "";
		
		Если ВозобновитьЗадачу Тогда
			Метод	= Метод_Задачи_ВозобновитьЗадачу();
		ИначеЕсли ЧисловоеЗначениеСтатуса = "3" Тогда  
			Метод	= Метод_Задачи_НачатьВыполнениеЗадачи();  
		ИначеЕсли ЧисловоеЗначениеСтатуса = "5" Тогда  
			Метод	= Метод_Задачи_ЗавершитьЗадачу();
		ИначеЕсли ЧисловоеЗначениеСтатуса = "6" Тогда  
			Метод	= Метод_Задачи_ОтложитьЗадачу();
		ИначеЕсли ЧисловоеЗначениеСтатуса = "7" Тогда  
			Метод	= Метод_Задачи_ОтменитьЗадачу();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Метод) Тогда 
			
			Адрес 	= СформироватьАдресСМетодом(ПараметрыПодключения, Метод);
			Ответ	= b24_КоннекторHTTP.PostJson(Адрес, СтруктураПараметры, Кэш.ДополнительныеПараметры);   
			
			ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод);
			
			//преобразуем в необходимые данные  
			Если ДанныеУспешноПолучены(Ответ) Тогда 
				
				СоответствиеНастройки		= Новый Соответствие();
				СоответствиеНастройки.Вставить("time", "СоответствиеВСтруктуру");
				СоответствиеНастройки.Вставить("result", "СоответствиеВТаблицуЗначений");
				
				ДанныеПреобразования = ПреобразоватьВДанные(Ответ, СоответствиеНастройки, Кэш.ДополнительныеПараметры.ПараметрыПреобразованияJSON, Кэш.МассивСвойствСоЗначениямиДата);  
				
				Если ДанныеПреобразования.Свойство("result")
					И ДанныеПреобразования.result.Количество() > 0 Тогда 
					
					Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеПреобразования.result[0]);
					
				КонецЕсли;
				
			Иначе
				
				Ошибка = ОписаниеОшибкиИзСервиса(Ответ);
				ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ОбновитьСтатусЗадачи", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.узЗадачи, TASKID, СтрШаблон("Не удалось обновить задачу. %1", Ошибка)); 
				
			КонецЕсли;
		КонецЕсли; 
		
	Исключение
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ОбновитьСтатусЗадачи", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат
	
КонецФункции  

Функция ПолучитьМассивВозможныхОбменовСтатусов() Экспорт 

	Массив = Новый Массив;
	Массив.Добавить("3");
	Массив.Добавить("5");
	Массив.Добавить("6");
	Массив.Добавить("7");
	
	Возврат Массив
	
КонецФункции

Функция ПолучитьСтруктураПараметры_Задачи_ОбновлениеЗадачи(taskId, Данные)
	
	Структура = Новый Структура(); 
	Структура.Вставить("taskId", taskId);
	Структура.Вставить("fields", Данные);
	
	Возврат Структура
	
КонецФункции

Функция Метод_Задачи_ОбновитьЗадачу()
	Возврат "tasks.task.update"
КонецФункции

#КонецОбласти 

#Область tasks_task_complete

Функция Метод_Задачи_ЗавершитьЗадачу()
	Возврат "tasks.task.complete"
КонецФункции

#КонецОбласти 

#Область tasks_task_defer

Функция Метод_Задачи_ОтложитьЗадачу()
	Возврат "tasks.task.defer"
КонецФункции

#КонецОбласти 

#Область tasks_task_disapprove

Функция Метод_Задачи_ОтменитьЗадачу()
	Возврат "tasks.task.disapprove"
КонецФункции

#КонецОбласти 

#Область tasks_task_renew

Функция Метод_Задачи_ВозобновитьЗадачу()
	Возврат "tasks.task.renew"
КонецФункции

#КонецОбласти 

#Область tasks_task_renew

Функция Метод_Задачи_НачатьВыполнениеЗадачи()
	Возврат "tasks.task.start"
КонецФункции

#КонецОбласти 

#Область task_commentitem_getlist

Функция Задачи_ПолучитьКомментарииЗадачи(TASKID, ПараметрыПодключения, Кэш = Неопределено) Экспорт 
	
	Данные = Неопределено;
	
	Если Кэш = Неопределено Тогда 
		Кэш = Новый Структура();	
	КонецЕсли;  
	
	//получаем список полей дат для преобразования
	Если Не Кэш.Свойство("МассивСвойствСоЗначениямиДата") Тогда 
		
		Кэш.Вставить("МассивСвойствСоЗначениямиДата", ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию()); 
		
		Кэш.МассивСвойствСоЗначениямиДата.Добавить("POST_DATE");
		
	КонецЕсли;
	
	Попытка
		
		//получаем дополнительные параметры
		Если Не Кэш.Свойство("ДополнительныеПараметры") Тогда 
			
			ПараметрыПреобразованияJSON 								= b24_КоннекторHTTP.ПолучитьПараметрыПреобразованияJSONПоУмолчанию();
			ПараметрыПреобразованияJSON.ИменаСвойствСоЗначениямиДата 	= ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию(); 
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);
			
			Кэш.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			
		КонецЕсли;
		
		//получаем параметры запроса
		СтруктураПараметры 		= ПолучитьСтруктураПараметры_Задачи_ЗадачаПоID(TASKID); 
		Кэш.ДополнительныеПараметры.Вставить("Json", СтруктураПараметры); 
		
		ВыполнитьЗадержку(ПараметрыПодключения);
		
		//получаем данные по HTTP запросу
		Адрес 		= СформироватьАдресСМетодом(ПараметрыПодключения, Метод_Задачи_ПолучитьКомментарииЗадачи());
		Результат 	= b24_КоннекторHTTP.PostJson(Адрес, СтруктураПараметры, Кэш.ДополнительныеПараметры); 
		
		ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод_Задачи_ПолучитьКомментарииЗадачи());
		
		Если ДанныеУспешноПолучены(Результат) Тогда 
			
			//преобразуем в необходимые данные
			СоответствиеНастройки		= Новый Соответствие();
			СоответствиеНастройки.Вставить("time", "СоответствиеВСтруктуру");
			СоответствиеНастройки.Вставить("result", "МассивВТаблицуЗначений");
			
			Данные = ПреобразоватьВДанные(Результат, СоответствиеНастройки, Кэш.ДополнительныеПараметры.ПараметрыПреобразованияJSON, Кэш.МассивСвойствСоЗначениямиДата);
			
			Данные = Данные.result; 
			
		Иначе 	
			
			Ошибка = ОписаниеОшибкиИзСервиса(Результат);
			ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ПолучитьКомментарииЗадачи", УровеньЖурналаРегистрации.Ошибка,, TASKID, СтрШаблон("Не удалось выгрузить комментарии к задаче. %1", Ошибка)); 
			
		КонецЕсли; 
		
	Исключение 
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ПолучитьКомментарииЗадачи", УровеньЖурналаРегистрации.Ошибка,, TASKID, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Данные
	
КонецФункции 

Функция Метод_Задачи_ПолучитьКомментарииЗадачи()
	Возврат "task.commentitem.getlist"
КонецФункции

#КонецОбласти 

#Область task_commentitem_add

Функция Задачи_ДобавитьКомментарий(TASKID, Данные, ПараметрыПодключения, Кэш = Неопределено) Экспорт 
	
	ID = Неопределено;
	
	Если Кэш = Неопределено Тогда 
		Кэш = Новый Структура();	
	КонецЕсли;  
	
	//получаем список полей дат для преобразования
	Если Не Кэш.Свойство("МассивСвойствСоЗначениямиДата") Тогда 
		
		Кэш.Вставить("МассивСвойствСоЗначениямиДата", ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию()); 
		
	КонецЕсли; 
	
	Попытка
		
		//получаем дополнительные параметры
		Если Не Кэш.Свойство("ДополнительныеПараметры") Тогда 
			
			ПараметрыПреобразованияJSON 								= b24_КоннекторHTTP.ПолучитьПараметрыПреобразованияJSONПоУмолчанию();
			ПараметрыПреобразованияJSON.ИменаСвойствСоЗначениямиДата 	= ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию(); 
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);
			
			Кэш.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			
		КонецЕсли;
		
		//получаем параметры запроса
		СтруктураПараметры 		= ПолучитьСтруктураПараметры_Задачи_ДобавитьКомментарий(TASKID, Данные); 
		Кэш.ДополнительныеПараметры.Вставить("Json", СтруктураПараметры); 
		
		ВыполнитьЗадержку(ПараметрыПодключения);
		
		//получаем данные по HTTP запросу
		Адрес 		= СформироватьАдресСМетодом(ПараметрыПодключения, Метод_Задачи_ДобавитьКомментарий());
		Результат 	= b24_КоннекторHTTP.PostJson(Адрес, СтруктураПараметры, Кэш.ДополнительныеПараметры);  
		
		ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод_Задачи_ДобавитьКомментарий());
		
		Если ДанныеУспешноПолучены(Результат) Тогда 
			
			//преобразуем в необходимые данные
			СоответствиеНастройки		= Новый Соответствие();
			СоответствиеНастройки.Вставить("time", "СоответствиеВСтруктуру");
			
			Данные 		= ПреобразоватьВДанные(Результат, СоответствиеНастройки, Кэш.ДополнительныеПараметры.ПараметрыПреобразованияJSON, Кэш.МассивСвойствСоЗначениямиДата);
			ПолеResult 	= ПолучитьПолеОтветаВебсервиса(Данные, "result");
			
			Если ПолеResult <> Неопределено Тогда 
				ID = ПолеResult; 
			КонецЕсли;
			
		Иначе 	
			
			Ошибка = ОписаниеОшибкиИзСервиса(Результат);
			ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ДобавитьКомментарий", УровеньЖурналаРегистрации.Ошибка,, TASKID, СтрШаблон("Не добавить комментарий. %1", Ошибка)); 
			
		КонецЕсли; 
		
	Исключение 
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Задачи_ДобавитьКомментарий", УровеньЖурналаРегистрации.Ошибка,, TASKID, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ID
	
КонецФункции 

Функция ПолучитьСтруктураПараметры_Задачи_ДобавитьКомментарий(TASKID, Данные)
	
	FIELDS 					= Новый Структура();
	FIELDS.Вставить("AUTHOR_ID", Данные.ID); 
	FIELDS.Вставить("POST_MESSAGE", Данные.Сообщение); 
	
	Структура = Новый Структура(); 
	Структура.Вставить("TASKID", TASKID);
	Структура.Вставить("FIELDS", FIELDS);
	
	Возврат Структура
	
КонецФункции

Функция Метод_Задачи_ДобавитьКомментарий()
	Возврат "task.commentitem.add"	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область Модуль_Пользователи 

#Область user_get

Функция Пользователи_ВсеПользователи(ПараметрыПодключения, Данные = Неопределено, КоличествоПропускаемыхЗаписей = 0, Кэш = Неопределено, Уровень = 1) Экспорт 
	
	Если Кэш = Неопределено Тогда 
		Кэш = Новый Структура();	
	КонецЕсли;  
	
	//удаляем фильтр по пользователям т.к. нам нужны все пользователи
	Фильтры = ПараметрыПодключения["ФильтрыПользователи"]; 
	ПараметрыПодключения["ФильтрыПользователи"].Очистить();
	
	//получаем список полей дат для преобразования
	Если Не Кэш.Свойство("МассивСвойствСоЗначениямиДата") Тогда 
		
		МассивСвойствСоЗначениямиДата 	= ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию();
		МассивСвойствСоЗначениямиДата.Добавить("DATE_REGISTER");
		МассивСвойствСоЗначениямиДата.Добавить("PERSONAL_BIRTHDAY");
		МассивСвойствСоЗначениямиДата.Добавить("LAST_LOGIN");
		
		Кэш.Вставить("МассивСвойствСоЗначениямиДата", МассивСвойствСоЗначениямиДата);
		
	КонецЕсли;
	
	Попытка
		
		//получаем дополнительные параметры
		Если Не Кэш.Свойство("ДополнительныеПараметры") Тогда 
			
			ПараметрыПреобразованияJSON 								= b24_КоннекторHTTP.ПолучитьПараметрыПреобразованияJSONПоУмолчанию();
			ПараметрыПреобразованияJSON.ИменаСвойствСоЗначениямиДата 	= ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию(); 
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);
			
			Кэш.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			
		КонецЕсли;
		
		//получаем параметры запроса
		СтруктураПараметры 		= ПолучитьСтруктураПараметры_Пользователи_ВсеПользователи(,, ПараметрыПодключения["ФильтрыПользователи"], , , КоличествоПропускаемыхЗаписей); 
		Кэш.ДополнительныеПараметры.Вставить("Json", СтруктураПараметры); 
		
		ВыполнитьЗадержку(ПараметрыПодключения);
		
		//получаем данные по HTTP запросу
		Адрес 		= СформироватьАдресСМетодом(ПараметрыПодключения, Метод_Пользователи_ВсеПользователи());
		Результат 	= b24_КоннекторHTTP.PostJson(Адрес, СтруктураПараметры, Кэш.ДополнительныеПараметры); 
		
		ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод_Пользователи_ВсеПользователи());
		
		Если ДанныеУспешноПолучены(Результат) Тогда 
			
			//преобразуем в необходимые данные
			СоответствиеНастройки		= Новый Соответствие();
			СоответствиеНастройки.Вставить("time", "СоответствиеВСтруктуру");
			СоответствиеНастройки.Вставить("result", "МассивВТаблицуЗначений");
			
			ДанныеДополнения = ПреобразоватьВДанные(Результат, СоответствиеНастройки, Кэш.ДополнительныеПараметры.ПараметрыПреобразованияJSON, Кэш.МассивСвойствСоЗначениямиДата);
			
			Если Данные = Неопределено Тогда 
				Данные = ДанныеДополнения;
			Иначе 
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДополнения.result, Данные.result); 
			КонецЕсли;
			
			//дополняем в случае постраничного обхода
			Если ДанныеДополнения.Свойство("next")
				И ДанныеДополнения.Свойство("total") Тогда 
				
				next 	= ДанныеДополнения.next;
				total 	= ДанныеДополнения.total;
				
				Пока next < total
					И Уровень = 1 Цикл   
					
					ДанныеДополнения = Пользователи_ВсеПользователи(ПараметрыПодключения, Данные, next, Кэш, Уровень + 1); 
					
					Если ДанныеДополнения <> Неопределено Тогда 
						Если ДанныеДополнения.Свойство("next") Тогда 
							next = ДанныеДополнения.next;
						Иначе 
							next 				= ДанныеДополнения.total;
							ДанныеДополнения 	= Данные;
						КонецЕсли; 
					Иначе 
						next = total;	
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли; 
			
		Иначе 	
			
			Ошибка = ОписаниеОшибкиИзСервиса(Результат);
			ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Пользователи_ВсеПользователи", УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон("Не удалось получить пользователей. %1", Ошибка)); 
			
		КонецЕсли;  
		
		ПараметрыПодключения["ФильтрыПользователи"] = Фильтры;
		
	Исключение
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Пользователи_ВсеПользователи", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ДанныеДополнения
	
КонецФункции  

Функция ПолучитьСтруктураПараметры_Пользователи_ВсеПользователи(sort = Неопределено, order = Неопределено, filter = Неопределено, ADMIN_MODE = Неопределено, limit = 50, start = 0)

	Структура 	= Новый Структура();
	
	Если filter <> Неопределено
		И filter.Количество() > 0 Тогда 
		
		СтруктураFilter = Новый Структура(); 
		
		Для Каждого Строка Из filter Цикл 
			СтруктураFilter.Вставить(Строка.Ключ, Строка.Значение);						
		КонецЦикла;
		
		Структура.Вставить("filter", СтруктураFilter); 
		
	КонецЕсли;
	
	Если limit <> 50 Тогда 
		Структура.Вставить("limit", limit); 	
	КонецЕсли;
	
	Если start <> 0 Тогда 
		Структура.Вставить("start", start); 	
	КонецЕсли;	
		
	Возврат Структура
	
КонецФункции

Функция Метод_Пользователи_ВсеПользователи()
	Возврат "user.get"
КонецФункции

#КонецОбласти

#КонецОбласти 

#Область Модуль_Подразделения 

#Область department_get  

Функция Подразделения_ВсеПодразделения(ПараметрыПодключения, Данные = Неопределено, КоличествоПропускаемыхЗаписей = 0, Кэш = Неопределено, Уровень = 1) Экспорт 
	
	Если Кэш = Неопределено Тогда 
		Кэш = Новый Структура();	
	КонецЕсли;  
	
	//получаем список полей дат для преобразования
	Если Не Кэш.Свойство("МассивСвойствСоЗначениямиДата") Тогда 
		
		МассивСвойствСоЗначениямиДата 	= ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию();
		МассивСвойствСоЗначениямиДата.Добавить("DATE_REGISTER");
		МассивСвойствСоЗначениямиДата.Добавить("PERSONAL_BIRTHDAY");
		МассивСвойствСоЗначениямиДата.Добавить("LAST_LOGIN");
		
		Кэш.Вставить("МассивСвойствСоЗначениямиДата", МассивСвойствСоЗначениямиДата);
		
	КонецЕсли;
	
	Попытка
		
		//получаем дополнительные параметры
		Если Не Кэш.Свойство("ДополнительныеПараметры") Тогда 
			
			ПараметрыПреобразованияJSON 								= b24_КоннекторHTTP.ПолучитьПараметрыПреобразованияJSONПоУмолчанию();
			ПараметрыПреобразованияJSON.ИменаСвойствСоЗначениямиДата 	= ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию(); 
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);
			
			Кэш.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			
		КонецЕсли;
		
		//получаем параметры запроса
		СтруктураПараметры 		= ПолучитьСтруктураПараметры_Подразделения_ВсеПодразделения(,,, , , КоличествоПропускаемыхЗаписей); 
		Кэш.ДополнительныеПараметры.Вставить("Json", СтруктураПараметры); 
		
		ВыполнитьЗадержку(ПараметрыПодключения);
		
		//получаем данные по HTTP запросу
		Адрес 		= СформироватьАдресСМетодом(ПараметрыПодключения, Метод_Подразделения_ВсеПодразделения());
		Результат 	= b24_КоннекторHTTP.PostJson(Адрес, СтруктураПараметры, Кэш.ДополнительныеПараметры);  
		
		ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод_Подразделения_ВсеПодразделения());
		
		Если ДанныеУспешноПолучены(Результат) Тогда 
			
			//преобразуем в необходимые данные
			СоответствиеНастройки		= Новый Соответствие();
			СоответствиеНастройки.Вставить("time", "СоответствиеВСтруктуру");
			СоответствиеНастройки.Вставить("result", "МассивВТаблицуЗначений");
			
			ДанныеДополнения = ПреобразоватьВДанные(Результат, СоответствиеНастройки, Кэш.ДополнительныеПараметры.ПараметрыПреобразованияJSON, Кэш.МассивСвойствСоЗначениямиДата);
			
			Если Данные = Неопределено Тогда 
				Данные = ДанныеДополнения;
			Иначе 
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДополнения.result, Данные.result); 
			КонецЕсли;
			
			//дополняем в случае постраничного обхода
			Если ДанныеДополнения.Свойство("next")
				И ДанныеДополнения.Свойство("total") Тогда 
				
				next 	= ДанныеДополнения.next;
				total 	= ДанныеДополнения.total;
				
				Пока next < total
					И Уровень = 1 Цикл   
					
					ДанныеДополнения = Подразделения_ВсеПодразделения(ПараметрыПодключения, Данные, next, Кэш, Уровень + 1); 
					
					Если ДанныеДополнения <> Неопределено Тогда 
						Если ДанныеДополнения.Свойство("next") Тогда 
							next = ДанныеДополнения.next;
						Иначе 
							next 				= ДанныеДополнения.total;
							ДанныеДополнения 	= Данные;
						КонецЕсли; 
					Иначе 
						next = total;	
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли; 
			
		Иначе 	
			
			Ошибка = ОписаниеОшибкиИзСервиса(Результат);
			ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Подразделения_ВсеПодразделения", УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон("Не удалось получить пользователей. %1", Ошибка)); 
			
		КонецЕсли;  
		
	Исключение
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.Подразделения_ВсеПодразделения", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ДанныеДополнения
	
КонецФункции  

Функция ПолучитьСтруктураПараметры_Подразделения_ВсеПодразделения(sort = Неопределено, order = Неопределено, filter = Неопределено, ADMIN_MODE = Неопределено, limit = 50, start = 0)

	Структура 	= Новый Структура();
	
	Если filter <> Неопределено
		И filter.Количество() > 0 Тогда 
		Для Каждого Строка Из filter Цикл 
			Структура.Вставить(Строка.Ключ, Строка.Значение);						
		КонецЦикла;
	КонецЕсли;
	
	Если limit <> 50 Тогда 
		Структура.Вставить("limit", limit); 	
	КонецЕсли;
	
	Если start <> 0 Тогда 
		Структура.Вставить("start", start); 	
	КонецЕсли;	
		
	Возврат Структура
	
КонецФункции

Функция Метод_Подразделения_ВсеПодразделения()
	Возврат "department.get"
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

Функция СформироватьАдрес(ПараметрыПодключения)
	Возврат СтрШаблон("https://%1/rest/%2/%3/", ПараметрыПодключения["URL"], Формат(ПараметрыПодключения["ИдентификаторПользователя"], "ЧГ=0"), ПараметрыПодключения["СекретныйКод"]);	
КонецФункции

Функция СформироватьАдресСМетодом(ПараметрыПодключения, Метод)  
	Возврат СтрШаблон("%1%2.json", СформироватьАдрес(ПараметрыПодключения), Метод);
КонецФункции

Функция СформироватьАдресПолученияДанных(ПараметрыПодключения, ПутьДанных)
	Возврат СтрШаблон("https://%1%2", ПараметрыПодключения["URL"], ПутьДанных)	
КонецФункции

Функция ПреобразоватьВДанные(Объект, Настройки, ПараметрыПреобразованияJSON = Неопределено, МассивСвойствСоЗначениямиДата = Неопределено)  
	
	Результат 					= Новый Структура();
	ОбъектПреобразования 		= Объект;
	СтрокаКлюч					= ""; 
	МассивИспользованныхПолей 	= Новый Массив;
	Отказ						= Ложь;
	
	Для Каждого Настройка Из Настройки Цикл 
		
		Ключ 				= Настройка.Ключ;
		МетодПреобразования	= Настройка.Значение;
		МассивКлючей 		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ключ,".", Истина); 
		
		Для Каждого СтрокаКлюч Из МассивКлючей Цикл 
			
			Если Не Отказ
				И ОбъектПреобразования.Получить(СтрокаКлюч) <> Неопределено Тогда 
				
				ОбъектПреобразования = ОбъектПреобразования.Получить(СтрокаКлюч);
				
				Если МассивКлючей.Найти(СтрокаКлюч) = 0 Тогда  
					МассивИспользованныхПолей.Добавить(СтрокаКлюч);
				КонецЕсли;
				
			Иначе 
				
				Отказ 					= Истина;
				ОбъектПреобразования 	= Неопределено;
				
			КонецЕсли;		
		КонецЦикла;  
		
		Если Не Отказ Тогда 
			
			Если МетодПреобразования = "СоответствиеВСтруктуру" Тогда 
				РезультатПреобразования = ПреобразоватьСоответствиеВСтруктура(ОбъектПреобразования);
			ИначеЕсли МетодПреобразования = "СоответствиеВТаблицуЗначений" Тогда 
				РезультатПреобразования = ПреобразоватьСоответствиеВТаблицуЗначений(ОбъектПреобразования, ПараметрыПреобразованияJSON, МассивСвойствСоЗначениямиДата); 
			ИначеЕсли МетодПреобразования = "МассивВТаблицуЗначений" Тогда 
				РезультатПреобразования = ПреобразоватьМассивВТаблицуЗначений(ОбъектПреобразования, ПараметрыПреобразованияJSON, МассивСвойствСоЗначениямиДата); 
			КонецЕсли; 
			
			Результат.Вставить(СтрокаКлюч, РезультатПреобразования);
			ОбъектПреобразования = Объект; 
			
		КонецЕсли; 		
	КонецЦикла;
	
	Для Каждого Элемент Из Объект Цикл 
		Если МассивИспользованныхПолей.Найти(Элемент.Ключ) = Неопределено Тогда 
			Результат.Вставить(Элемент.Ключ, Элемент.Значение);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

Функция ПреобразоватьСоответствиеВСтруктура(Объект)

	Результат = Новый Структура();
	
	Для Каждого Строка Из Объект Цикл 
		Результат.Вставить(Строка.Ключ, Строка.Значение);	
	КонецЦикла;
		
	Возврат Результат
	
КонецФункции

Функция ПреобразоватьСоответствиеВТаблицуЗначений(Объект, ПараметрыПреобразованияJSON = Неопределено, МассивСвойствСоЗначениямиДата = Неопределено)

	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Name", Новый ОписаниеТипов("Строка"));
	
	//добавляем колонки
	Для Каждого Строка Из Объект Цикл 
		ДобавитьКолонкиВТаблицу(Результат, Строка.Значение, МассивСвойствСоЗначениямиДата);
	КонецЦикла;  
	
	//заполняем таблицу
	Для Каждого Строка Из Объект Цикл  
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Name = Строка.Ключ;
		
		Для Каждого СтрокаДетализация Из Строка.Значение Цикл 
			
			ПреобразовыватьВДату 	= ?(МассивСвойствСоЗначениямиДата = Неопределено ИЛИ ПараметрыПреобразованияJSON = Неопределено, Ложь, МассивСвойствСоЗначениямиДата.Найти(ВРег(СтрокаДетализация.Ключ)) <> Неопределено);
			
			Если ПреобразовыватьВДату Тогда 
				Если ЗначениеЗаполнено(СтрокаДетализация.Значение) Тогда 
					Попытка
						НоваяСтрока[СтрокаДетализация.Ключ] = ПрочитатьДатуJSON(Формат(СтрокаДетализация.Значение, "ЧГ="), ПараметрыПреобразованияJSON.ФорматДатыJSON);   
					Исключение 
						НоваяСтрока[СтрокаДетализация.Ключ] = '00010101'; 
						//ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ПреобразоватьСоответствиеВТаблицуЗначений", УровеньЖурналаРегистрации.Ошибка, , СтрокаДетализация.Значение, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				Иначе 
					НоваяСтрока[СтрокаДетализация.Ключ] = '00010101';   
				КонецЕсли;
			Иначе 
				НоваяСтрока[СтрокаДетализация.Ключ] = СтрокаДетализация.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;  
	
	Результат.Сортировать("Name");
	
	Возврат Результат
	
КонецФункции

Функция ПреобразоватьМассивВТаблицуЗначений(Объект, ПараметрыПреобразованияJSON = Неопределено, МассивСвойствСоЗначениямиДата = Неопределено)

	Результат = Новый ТаблицаЗначений();
	
	//добавляем колонки
	Для Каждого Элемент Из Объект Цикл
		ДобавитьКолонкиВТаблицу(Результат, Элемент, МассивСвойствСоЗначениямиДата);
	КонецЦикла;  
	
	//заполняем таблицу
	Для Каждого Элемент Из Объект Цикл 
		НоваяСтрока = Результат.Добавить();
		Для Каждого Строка Из Элемент Цикл 
			
			ПреобразовыватьВДату 	= ?(МассивСвойствСоЗначениямиДата = Неопределено Или ПараметрыПреобразованияJSON = Неопределено, Ложь, МассивСвойствСоЗначениямиДата.Найти(ВРег(Строка.Ключ)) <> Неопределено);
			
			Если ПреобразовыватьВДату Тогда 
				Если ЗначениеЗаполнено(Строка.Значение) Тогда 
					Попытка
						НоваяСтрока[Строка.Ключ] = ПрочитатьДатуJSON(Формат(Строка.Значение, "ЧГ="), ПараметрыПреобразованияJSON.ФорматДатыJSON);   
					Исключение
						НоваяСтрока[Строка.Ключ] = '00010101'; 
						//ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ПреобразоватьСоответствиеВТаблицуЗначений", УровеньЖурналаРегистрации.Ошибка, , Строка.Значение, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				Иначе 
					НоваяСтрока[Строка.Ключ] = '00010101';   
				КонецЕсли;
			Иначе 
				НоваяСтрока[Строка.Ключ] = Строка.Значение;
			КонецЕсли;
		КонецЦикла;  
	КонецЦикла;  
	
	Возврат Результат
	
КонецФункции 

Функция ДобавитьКолонкиВТаблицу(Таблица, Коллекция, МассивСвойствСоЗначениямиДата = Неопределено)
	
	Для Каждого Колонка Из Коллекция Цикл 
		Если Таблица.Колонки.Найти(Колонка.Ключ) = Неопределено Тогда 
			
			Тип 					= ТипЗнч(Колонка.Значение); 
			ПреобразовыватьВДату 	= ?(МассивСвойствСоЗначениямиДата = Неопределено, Ложь, МассивСвойствСоЗначениямиДата.Найти(ВРег(Колонка.Ключ)) <> Неопределено); 
			
			Если Тип = Тип("Неопределено") Тогда 
				Таблица.Колонки.Добавить(Колонка.Ключ, Новый ОписаниеТипов("Неопределено"));
			ИначеЕсли ПреобразовыватьВДату Тогда 
				Таблица.Колонки.Добавить(Колонка.Ключ, Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
			Иначе 
				Таблица.Колонки.Добавить(Колонка.Ключ, Новый ОписаниеТипов(ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипЗнч(Колонка.Значение))));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ПолучитьМассивСвойствСоЗначениямиДатаПоУмолчанию() Экспорт  
	
	МассивСвойствСоЗначениямиДата = Новый Массив;
	МассивСвойствСоЗначениямиДата.Добавить("date_start");
	МассивСвойствСоЗначениямиДата.Добавить("date_finish");
	
	Возврат МассивСвойствСоЗначениямиДата
	
КонецФункции

Функция ДатуВJSON(Дата, Формат = Неопределено) Экспорт 
	
	Если Формат = Неопределено Тогда 
		Формат = ФорматДатыJSON.ISO; 
	КонецЕсли;
	
	Возврат ЗаписатьДатуJSON(Дата, Формат);
	
КонецФункции

Функция ПолучитьСтруктураПараметры_Задачи_ЗадачаПоID(TASKID)

	Структура 	= Новый Структура();
	Структура.Вставить("TASKID", TASKID); 	
	
	Возврат Структура
	
КонецФункции

Функция ПолучитьСтруктураПараметры_Задачи_ЗадачаПоID_НижнийРегистр(TASKID)

	Структура 	= Новый Структура();
	Структура.Вставить("taskId", TASKID); 	
	
	Возврат Структура
	
КонецФункции

Функция ДанныеУспешноПолучены(Данные, ПолеРезультат = "result")  
	
	Результат 	= Ложь;
	ПолеПоиска 	= ПолучитьПолеОтветаВебсервиса(Данные, ПолеРезультат);
	
	Если ПолеПоиска <> Неопределено Тогда 
		Результат = Истина;		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

Функция ОписаниеОшибкиИзСервиса(Данные)  

	Результат 		= ""; 
	Ошибка		 	= ПолучитьПолеОтветаВебсервиса(Данные, "error");
	ОшибкаОписание 	= ПолучитьПолеОтветаВебсервиса(Данные, "error_description");

	Если Ошибка <> Неопределено Тогда 
		Результат = СтрШаблон("%1%2. ", Результат, Ошибка);
	КонецЕсли;
	
	Если ОшибкаОписание <> Неопределено Тогда 
		Результат = СтрШаблон("%1%2. ", Результат, ОшибкаОписание);
	КонецЕсли;
	
	Возврат Результат

КонецФункции

Функция ПолучитьПолеОтветаВебсервиса(Данные, Поле)

	Результат = Неопределено;
	
	Если ТипЗнч(Данные) = Тип("Структура")
		И Данные.Свойство(Поле) Тогда 
		Результат = Данные[Поле];	
	ИначеЕсли ТипЗнч(Данные) = Тип("Соответствие")
		И Данные[Поле] <> Неопределено Тогда 
		Результат = Данные[Поле];	
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

Процедура ВыполнитьЗадержку(ПараметрыПодключения)  
	
	МаксимальноеКоличествоЗапросовПередЗадержкой 	= ПараметрыПодключения["МаксимальноеКоличествоЗапросовПередЗадержкой"];
	МаксимальноеКоличествоЗапросовПередЗадержкой	= ?(МаксимальноеКоличествоЗапросовПередЗадержкой = Неопределено, 0, МаксимальноеКоличествоЗапросовПередЗадержкой);
	
	Задержка 										= ПараметрыПодключения["Задержка"];
	Задержка										= ?(Задержка = Неопределено, 0, Задержка);
	
	КоличествоВыполненныхЗапросов 					= ПараметрыПодключения["КоличествоВыполненныхЗапросов"];
	
	Если КоличествоВыполненныхЗапросов = Неопределено Тогда 
		
		КоличествоВыполненныхЗапросов							= 1;
		ПараметрыПодключения["КоличествоВыполненныхЗапросов"] 	= КоличествоВыполненныхЗапросов; 
		
	Иначе 
		
		КоличествоВыполненныхЗапросов							= КоличествоВыполненныхЗапросов + 1;
		ПараметрыПодключения["КоличествоВыполненныхЗапросов"] 	= КоличествоВыполненныхЗапросов; 
		
	КонецЕсли; 
	
	Если МаксимальноеКоличествоЗапросовПередЗадержкой = 0 Тогда 
		ВыполнитьПаузу(Задержка);	
	ИначеЕсли МаксимальноеКоличествоЗапросовПередЗадержкой > 0
		И КоличествоВыполненныхЗапросов%МаксимальноеКоличествоЗапросовПередЗадержкой = 0 Тогда 
		ВыполнитьПаузу(Задержка);	
	КонецЕсли;	
	
КонецПроцедуры 

Процедура ЗаписатьСтатистикуВыполненияЗапросов(ПараметрыПодключения, Метод)
	
	Сайт = ПараметрыПодключения["Сайт"];
	Дата = ПараметрыПодключения["ДатаПолученияНастроек"];
	
	РегистрыСведений.b24_СтатистикаВыполненияЗапросов.Записать(Дата, Сайт, Метод);
	
КонецПроцедуры

Процедура ВыполнитьПаузу(Задержка = 1)

	ТекущаяДата = ТекущаяДатаСеанса();
	ДатаРезультат = ТекущаяДата + 1;
	
	Пока ТекущаяДата < ДатаРезультат Цикл 
		ТекущаяДата = ТекущаяДатаСеанса();	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти