 
#Область Загрузка
 
Процедура ВыполнитьЗагрузку(Сайт, Кэш, Отказ) Экспорт
	
	НачалоОбмена				= ТекущаяДатаСеанса();
	Настройки 					= Кэш.Настройки[Сайт];
	ДатаОбмена 					= '00010101'; 
	ТаблицаЗадач				= Новый ТаблицаЗначений();
	ТаблицаПользователей		= Новый ТаблицаЗначений(); 
	ТаблицаПодразделений		= Новый ТаблицаЗначений();  
	СтруктураПользователи		= Неопределено;
	ФильтрыЗадач				= Настройки.ПараметрыПодключения["ФильтрыЗадачи"];

	//переопределим фильтры задач на последние измененные
	Если Настройки <> Неопределено Тогда 
		Если Настройки.Свойство("ДатаНачалаОбмена")
			И ЗначениеЗаполнено(Настройки.ДатаНачалаОбмена) Тогда 
			ДатаОбмена = Настройки.ДатаНачалаОбмена;
		КонецЕсли;
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ДатаОбмена) Тогда
	//	ДобавитьФильтр(Настройки.ПараметрыПодключения["ФильтрыЗадачи"], "CHANGED_DATE", ДатаОбмена, Перечисления.b24_ВидСравнения.БольшеЛибоРавно);
	//КонецЕсли;
	
	Попытка
		
		СтруктураПользователи 		= b24_API.Пользователи_ВсеПользователи(Настройки.ПараметрыПодключения);   
		
		Если СтруктураПользователи <> Неопределено Тогда 
			ТаблицаПользователей = СтруктураПользователи.result;	
		КонецЕсли; 
		
		//загрузка подразделения  
		Если ИспользоватьОбмен(Настройки, Метаданные.Справочники.b24_Подразделения) Тогда 
			
			СтруктураПодразделения 		= b24_API.Подразделения_ВсеПодразделения(Настройки.ПараметрыПодключения);   
			
			Если СтруктураПодразделения <> Неопределено Тогда 
				ТаблицаПодразделений = СтруктураПодразделения.result;	
			КонецЕсли; 
			
			ЗагрузитьПодразделения(Сайт, ТаблицаПодразделений, Кэш, Отказ);  
			
		КонецЕсли;
		
		//обновление пользователей  
		ОбновитьПользователей(Настройки, Сайт, ТаблицаПользователей, Кэш, Отказ);   
		
		//загрузка контрагентов  
		ЗагрузитьКонтрагентов(Настройки, Сайт, ТаблицаПользователей, Кэш, Отказ); 
		
		//загрузка задач 
		Если ИспользоватьОбмен(Настройки, Метаданные.Справочники.узЗадачи) Тогда    
			
			СтруктураЗадач 						= b24_API.Задачи_ВсеЗадачи(Настройки.ПараметрыПодключения);
			СоотвествиеПользовательскихПолей 	= b24_API.Задачи_ВсеЗадачиПользовательскиеПоля(Настройки.ПараметрыПодключения);
			
			Если СтруктураЗадач <> Неопределено Тогда 
				ТаблицаЗадач = СтруктураЗадач.tasks;	
			КонецЕсли;
			
			ДанныеЗагрузки = Новый Структура();
			ДанныеЗагрузки.Вставить("ТаблицаЗадач", ТаблицаЗадач);
			ДанныеЗагрузки.Вставить("ТаблицаПользователей", ТаблицаПользователей);
			ДанныеЗагрузки.Вставить("СоотвествиеПользовательскихПолей", СоотвествиеПользовательскихПолей);
			
			ЗагрузитьЗадачи(Сайт, Настройки, ДанныеЗагрузки, Кэш, Отказ);  
			
		КонецЕсли;
		
		//вернем фильтры назад
		Настройки.ПараметрыПодключения["ФильтрыЗадачи"] = ФильтрыЗадач;
		
	Исключение 
		
		Отказ = Истина;
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ВыполнитьЗагрузку", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры 

Процедура ЗагрузитьПодразделения(Сайт, ТаблицаПодразделений, Кэш, Отказ)
	
	ТаблицаПодразделений.Колонки.Добавить("Загружен", Новый ОписаниеТипов("Булево"));
	
	ГлавныеПодразделения = ТаблицаПодразделений.НайтиСтроки(Новый Структура("PARENT", "")); 
	
	ЗагрузитьПодразделенияРекурсивно(Сайт, ГлавныеПодразделения, ТаблицаПодразделений, Кэш, Отказ);
	
КонецПроцедуры 

Процедура ЗагрузитьПодразделенияРекурсивно(Сайт, СтрокиЗагрузки, ТаблицаПодразделений, Кэш, Отказ)

	Для Каждого Строка Из СтрокиЗагрузки Цикл 
		
		ЗагрузитьПодразделение(Сайт, Строка, Кэш, Отказ);	   
		
		ИскомыеСтроки = ТаблицаПодразделений.НайтиСтроки(Новый Структура("PARENT", Строка.ID)); 
		
		ЗагрузитьПодразделенияРекурсивно(Сайт, ИскомыеСтроки, ТаблицаПодразделений, Кэш, Отказ);  
		
		Строка.Загружен = Истина;
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ЗагрузитьПодразделение(Сайт, Данные, Кэш, Отказ)
	
	ID						= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Данные.ID);
	PARENT					= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Данные.PARENT);
	
	ИскомоеПодразделение 	= Справочники.b24_Подразделения.НайтиПоРеквизиту("ID", ID);  
	Записывать				= Истина;  
	ЭтоНовыйОбъект			= Ложь;
	
	Если ИскомоеПодразделение.Пустая() Тогда 
		
		СправочникОбъект 	= Справочники.b24_Подразделения.СоздатьЭлемент(); 
		ЭтоНовыйОбъект		= Истина; 
		
	Иначе 
		
		СправочникОбъект = ИскомоеПодразделение.ПолучитьОбъект();
		
		Если СправочникОбъект.ID = ID
			И СправочникОбъект.Наименование = Данные.NAME
			И СправочникОбъект.Родитель = Справочники.b24_Подразделения.НайтиПоРеквизиту("ID", PARENT) Тогда 
			Записывать = Ложь;	
		КонецЕсли;
		
	КонецЕсли;      
	
	Если Записывать Тогда 
		
		СправочникОбъект.ID 			= ID;
		СправочникОбъект.Наименование 	= Данные.NAME;
		СправочникОбъект.Родитель		= Справочники.b24_Подразделения.НайтиПоРеквизиту("ID", PARENT);
		
		Попытка
			
			СправочникОбъект.Записать();
			РегистрыСведений.b24_ИсторияОбменаОбъектов.Записать(Сайт, СправочникОбъект.Ссылка, Перечисления.b24_СобытияОбмена.ЗагруженВУправлениеЗадачами);
			
		Исключение
			
			ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ЗагрузитьПодразделение", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			
			Если Не ЭтоНовыйОбъект Тогда 
				РегистрыСведений.b24_ИсторияОбменаОбъектов.Записать(Сайт, СправочникОбъект.Ссылка, Перечисления.b24_СобытияОбмена.ОшибкаЗагрузкиВУправлениеЗадачами);
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПользователей(Настройки, Сайт, ТаблицаПользователей, Кэш, Отказ)
	
	Если ИспользоватьОбмен(Настройки, Метаданные.Справочники.Пользователи) Тогда    
    	//изменение элемента справочника Пользователи
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаПользователей Цикл 
		
		Пользователь1С = Кэш.СоответствиеПользователей1С[Строка.EMAIL];
		
		Если Пользователь1С <> Неопределено Тогда 
			РегистрыСведений.b24_ИдентификаторыОбъектов.Обновить(Сайт, Пользователь1С, Строка.ID);
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьКонтрагентов(Настройки, Сайт, ТаблицаПользователей, Кэш, Отказ)
	
	Если ИспользоватьОбмен(Настройки, Метаданные.Справочники.узКонтрагенты) Тогда 
		
		МассивID = Новый Массив;
		
		Для Каждого СтрокаПользователь Из ТаблицаПользователей Цикл
			
			МассивID.Добавить(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаПользователь["ID"]));
			
			Зазказчик = ПолучитьЗаказчика(СтрокаПользователь, Кэш.СоответствиеКонтрагентов);
			
		КонецЦикла; 
		
		ОбновитьКонтрагентов(Настройки, Сайт, ТаблицаПользователей, Кэш.СоответствиеКонтрагентов, Отказ);

		Если МассивID.Количество() > 0 Тогда 
			ПометитьНаУдалениеНеИспользуемыхКонтрагентов(Настройки, Сайт, МассивID, Кэш.СоответствиеКонтрагентов, Отказ);	
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры 

Процедура ЗагрузитьЗадачи(Сайт, Настройки, ДанныеЗагрузки, Кэш, Отказ)
	
	ТаблицаЗадач 						= ДанныеЗагрузки.ТаблицаЗадач;
	ТаблицаПользователей 				= ДанныеЗагрузки.ТаблицаПользователей;
	СоотвествиеПользовательскихПолей 	= ДанныеЗагрузки.СоотвествиеПользовательскихПолей;
	
	СостоянияОбменаСайта = Кэш.СостоянияОбменаЗадач[Сайт];  
    
	Для Каждого СтрокаЗадача Из ТаблицаЗадач Цикл 
		
		ТребуетсяОбновить 	= Истина;
		ДанныеОбменаЗадачи	= Неопределено;
		
		Если СостоянияОбменаСайта <> Неопределено Тогда 
			ДанныеОбменаЗадачи	= СостоянияОбменаСайта[СтрокаЗадача.id];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОбменаЗадачи) 
			И ЗначениеЗаполнено(ДанныеОбменаЗадачи.ДатаПоследнегоУспешногоОбмена)
			И Макс(СтрокаЗадача.activityDate, СтрокаЗадача.changedDate) <= ДанныеОбменаЗадачи.ДатаПоследнегоУспешногоОбмена Тогда 
			ТребуетсяОбновить = Ложь;	
		КонецЕсли; 
		
		//ТребуетсяОбновить = Истина; // временная залочка для отладки 
		
		Если ТребуетсяОбновить Тогда 
			
			ТаблицаФайлов 		= b24_API.Задачи_ПолучитьФайлыЗадачи(СтрокаЗадача.id, СтрокаЗадача.guid, Настройки.ПараметрыПодключения);
			
			ДанныеГенерации = Новый Структура();
			ДанныеГенерации.Вставить("Сайт", Сайт);
			ДанныеГенерации.Вставить("Настройки", Настройки);
			ДанныеГенерации.Вставить("ДанныеЗадачи", СтрокаЗадача);
			ДанныеГенерации.Вставить("ДанныеОбменаЗадачи", ДанныеОбменаЗадачи);
			ДанныеГенерации.Вставить("ТаблицаПользователей", ТаблицаПользователей);
			ДанныеГенерации.Вставить("СоотвествиеПользовательскихПолей", СоотвествиеПользовательскихПолей);
			ДанныеГенерации.Вставить("СоответствиеПользователей1С", Кэш.СоответствиеПользователей1С);
			ДанныеГенерации.Вставить("СоответствиеКонтрагентов", Кэш.СоответствиеКонтрагентов);
			ДанныеГенерации.Вставить("ТаблицаФайлов", ТаблицаФайлов);
			
			Задача = СФормироватьЗадачу(Сайт, ДанныеГенерации, Отказ);
			
			//Прервать; // временная залочка для отладки
			
		КонецЕсли;			
	КонецЦикла;

КонецПроцедуры 

Функция СформироватьЗадачу(Сайт, Данные, Отказ)
	
	ДанныеОбменаЗадачи 	= Данные.ДанныеОбменаЗадачи; 
	ДанныеБитрикса 		= Данные.ДанныеЗадачи;
	
	Попытка
		
		//инициализация переменных
		GUID 			= ПолучитьGUID(ДанныеБитрикса.guid);
		ЭтоНоваяЗадача 	= Истина;
		ЗагружатьСтатус	= ЗагружатьСтатус(ДанныеБитрикса.status, Данные.Настройки.Статусы);
		Статус			= ПолучитьСтатусЗадачи(ДанныеБитрикса.status, Данные.Настройки.Статусы);   
		Задача 			= Справочники.узЗадачи.ПолучитьСсылку(GUID);  
		ЗадачаПоID		= Справочники.узЗадачи.НайтиПоРеквизиту("НомерВнешнейЗаявки", ДанныеБитрикса.id); 
		
		//получение ссылки на задачу
		Если ОбщегоНазначения.СсылкаСуществует(Задача) Тогда 
			
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			ЗадачаОбъект.Заблокировать();
			
			ЭтоНоваяЗадача = Ложь;
			
		ИначеЕсли ЗначениеЗаполнено(ЗадачаПоID) Тогда 
			
			ЗадачаОбъект = ЗадачаПоID.ПолучитьОбъект();
			ЗадачаОбъект.Заблокировать();
			
			ЭтоНоваяЗадача = Ложь;
			
		Иначе 
			ЗадачаОбъект = Справочники.узЗадачи.СоздатьЭлемент();
			ЗадачаОбъект.УстановитьСсылкуНового(Задача);
		КонецЕсли; 
		
		//выполним проверку что задача не была записана во время процесса обмена
		Если Не ЭтоНоваяЗадача
			И ЭтоЗаблокированныйОбъект(Сайт, ЗадачаОбъект.Ссылка) Тогда  
			РегистрыСведений.b24_ИсторияОбменаОбъектов.Записать(Сайт, ЗадачаОбъект.Ссылка, Перечисления.b24_СобытияОбмена.ОбъектЗаблокированДляЗагрузкиВУправлениеЗадачами); 
			ВОЗВРАТ ЗадачаОбъект.Ссылка
		КонецЕсли;
		
		//заполнение полей, которые обновляются всегда
		ЗадачаОбъект.ОбменДанными.Загрузка			= Истина;
		ЗадачаОбъект.Важность 						= Справочники.узВариантыВажностиЗадачи.Обычная;
		ЗадачаОбъект.НомерВнешнейЗаявки				= ДанныеБитрикса.id;   
		ЗадачаОбъект.URLВнешнейЗаявки				= ПолучитьURLВнешнейЗаявки(Данные.Настройки.ПараметрыПодключения, ДанныеБитрикса);
		ЗадачаОбъект.Наименование 					= СокрЛП(ДанныеБитрикса.title);  
		ЗадачаОбъект.Автор							= ПолучитьПользователя1С(ДанныеБитрикса.createdBy, Данные.ТаблицаПользователей, Данные.СоответствиеПользователей1С);   
		
		//Описание
		ДанныеОписания 								= ПолучитьДанныеОписанияЗадачи(ДанныеБитрикса.description);
		ЗадачаОбъект.ТекстСодержания 				= ДанныеОписания.ТекстСодержания;
		ЗадачаОбъект.Содержание 					= Новый ХранилищеЗначения(ДанныеОписания.ФорматированныйДокумент, Новый СжатиеДанных(9));	
		
		//заполнение полей, которые обновляются в случае если задача новая
		Если ЭтоНоваяЗадача Тогда 
			
			ЗадачаОбъект.ОформлениеТекста 				= ПредопределенноеЗначение("Перечисление.узОформлениеТекста.ФорматированныйТекст"); 
			ЗадачаОбъект.ПоказыватьВОтчетахИКанбанДоске = Истина;  
			ЗадачаОбъект.Родитель 						= Данные.Настройки.РодительскийКаталог;  
			ЗадачаОбъект.b24_ПодразделениеИсполнитель	= Данные.Настройки.Подразделение;
			ЗадачаОбъект.Важность						= ПолучитьВажностьЗадачи(ДанныеБитрикса.priority); 
			ЗадачаОбъект.СрокИсполнения					= ДанныеБитрикса.deadline;
			//ЗадачаОбъект.Исполнитель					= ПолучитьПользователя1С(ДанныеБитрикса.responsibleId, Данные.ТаблицаПользователей, Данные.СоответствиеПользователей1С);
			ЗадачаОбъект.ДатаНачалаРаботПоЗадаче		= ДанныеБитрикса.dateStart; 
			ЗадачаОбъект.ДатаСоздания					= ДанныеБитрикса.createdDate;
			ЗадачаОбъект.ЧасыПлан						= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеБитрикса.timeEstimate) / (60 * 60); 
						
			Если ЗагружатьСтатус Тогда 
				ЗадачаОбъект.Статус						= Статус; 
			КонецЕсли;
			
		КонецЕсли; 
		
		//заполнение полей, в случае изменение даты в битриксе, при этом дата битрикса должна быть больше даты в задаче
		Если ДанныеБитрикса.changedDate > ЗадачаОбъект.ДатаПоследнегоИзменения Тогда 
			ЗадачаОбъект.ДатаПоследнегоИзменения		= ДанныеБитрикса.changedDate; 
			ЗадачаОбъект.АвторПоследнегоИзменения		= ПолучитьПользователя1С(ДанныеБитрикса.changedBy, Данные.ТаблицаПользователей, Данные.СоответствиеПользователей1С);
		КонецЕсли;
				
		Если ДанныеБитрикса.closedDate > ЗадачаОбъект.ДатаВыполнения Тогда 
			ЗадачаОбъект.ДатаВыполнения					= ДанныеБитрикса.closedDate; 
		КонецЕсли;
		
		//заполнение полей по особому алгоритму
		Если ЗначениеЗаполнено(Статус) Тогда 
			
			ВидСтатуса 			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статус, "ВидСтатуса");  
			ВидСтатусаСтарый 	= Справочники.узСтатусыЗадачи.ПустаяСсылка();  
			МенятьСтатусГотово 	= Истина;
			
			Если Не ЭтоНоваяЗадача Тогда 
				ВидСтатусаСтарый = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаОбъект.Ссылка, "Статус.ВидСтатуса"); 
			КонецЕсли;
			
			//в случае если это конечный статус, то в любом случае пробрасываем статус
			Если ВидСтатуса <> Справочники.узВидыСтатусов.Готово Тогда 
				МенятьСтатусГотово = Ложь;	
			КонецЕсли; 
			
			//в случае если у ссылки уже конечный статус с видом готово, то его не меняем.
			Если Не ЭтоНоваяЗадача 
				И ЗначениеЗаполнено(ВидСтатусаСтарый) 
				И ВидСтатусаСтарый = Справочники.узВидыСтатусов.Готово
				И ВидСтатусаСтарый = ВидСтатуса Тогда
				МенятьСтатусГотово = Ложь;	
			КонецЕсли;  
			
			Если МенятьСтатусГотово Тогда 
				ЗадачаОбъект.Статус = Статус;	
			КонецЕсли;
			
			//в случае возобновления статуса из конечного, то ставим статус повторно
			Если Не ЭтоНоваяЗадача
				И ВидСтатуса <> Справочники.узВидыСтатусов.Готово Тогда 
				
				Если ЗначениеЗаполнено(Данные.Настройки.СтатусПовторногоВозобновленияЗадачи) 
					И ВидСтатусаСтарый = Справочники.узВидыСтатусов.Готово Тогда  
					ЗадачаОбъект.Статус = Данные.Настройки.СтатусПовторногоВозобновленияЗадачи;	
				ИначеЕсли ВидСтатусаСтарый = Справочники.узВидыСтатусов.Готово Тогда
					ЗадачаОбъект.Статус = Статус;	
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;   
		
		Если ЗадачаОбъект.Статус.Пустая()
			И Не Данные.Настройки.СтатусПоУмолчанию.Пустая() Тогда 
			ЗадачаОбъект.Статус	= Данные.Настройки.СтатусПоУмолчанию;
		ИначеЕсли ЗадачаОбъект.Статус.Пустая() Тогда 
			ЗадачаОбъект.Статус	= Справочники.узСтатусыЗадачи.Зарегистрирована;
		КонецЕсли;		
				
		Если Не ЗначениеЗаполнено(Данные.Настройки.ВидЗаказчика) Тогда 
			ЗадачаОбъект.Контрагент					= ПолучитьЗаказчикаПоЗадаче(ДанныеБитрикса, Данные.СоответствиеКонтрагентов, "createdBy");
		ИначеЕсли Данные.Настройки.ВидЗаказчика = Перечисления.b24_ВидПользователя.Постановщик Тогда 
			ЗадачаОбъект.Контрагент					= ПолучитьЗаказчикаПоЗадаче(ДанныеБитрикса, Данные.СоответствиеКонтрагентов, "createdBy");
		ИначеЕсли Данные.Настройки.ВидЗаказчика = Перечисления.b24_ВидПользователя.Отвественный Тогда 
			ЗадачаОбъект.Контрагент					= ПолучитьЗаказчикаПоЗадаче(ДанныеБитрикса, Данные.СоответствиеКонтрагентов, "responsibleId");
		ИначеЕсли Данные.Настройки.ВидЗаказчика = Перечисления.b24_ВидПользователя.Соисполнитель Тогда 
			ЗадачаОбъект.Контрагент					= ПолучитьЗаказчикаПоМассивуПользователей(ДанныеБитрикса.accomplices, Данные.СоответствиеКонтрагентов);
		ИначеЕсли Данные.Настройки.ВидЗаказчика = Перечисления.b24_ВидПользователя.Наблюдатель Тогда 
			ЗадачаОбъект.Контрагент					= ПолучитьЗаказчикаПоМассивуПользователей(ДанныеБитрикса.auditors, Данные.СоответствиеКонтрагентов);
		КонецЕсли;	
		
		//пользовательские поля
		ЗагружаемыеПользовательскиеПоля = Данные.СоотвествиеПользовательскихПолей[ДанныеБитрикса.id];
		
		Если ЗагружаемыеПользовательскиеПоля <> Неопределено Тогда 
			Для Каждого ПользовательскоеПоле Из Данные.Настройки.ПараметрыПодключения["ПользовательскиеПоляЗадачи"] Цикл 
				
				ЗначениеПользовательскогоПоля = ЗагружаемыеПользовательскиеПоля[ПользовательскоеПоле.Ключ];
				
				Если ЗначениеПользовательскогоПоля <> Неопределено Тогда 
					ЗадачаОбъект[ПользовательскоеПоле.Значение.ВнутреннийПуть] = ЗначениеПользовательскогоПоля;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
						
		ЗадачаОбъект.ДополнительныеСвойства.Вставить("ЗадачаЗагруженаИзРасширенияИнтеграцияБитрикс24", Истина);
		
		ЗаписатьКомментарии(ЗадачаОбъект, Данные);
		
		Если Не ЗначениеЗаполнено(ЗадачаОбъект.Код) Тогда 
			ЗадачаОбъект.УстановитьНовыйКод();                
		КонецЕсли;
			
		ЗадачаОбъект.Записать();
		Задача = ЗадачаОбъект.Ссылка;
		
		ЗаписатьФайлыЗадачи(Задача, Данные);
		
		РегистрыСведений.b24_СостоянияОбменаЗадач.Записать(Данные.Сайт, ЗадачаОбъект.Ссылка, Макс(ДанныеБитрикса.activityDate, ДанныеБитрикса.changedDate)); 
		РегистрыСведений.b24_ИсторияОбменаОбъектов.Записать(Сайт, ЗадачаОбъект.Ссылка, Перечисления.b24_СобытияОбмена.ЗагруженВУправлениеЗадачами);
		
	Исключение 
		
		Отказ = Истина;
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.СформироватьЗадачу", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));   
		
		Если Не ЭтоНоваяЗадача
			И ОбщегоНазначения.СсылкаСуществует(ЗадачаОбъект.Ссылка) Тогда 
			РегистрыСведений.b24_ИсторияОбменаОбъектов.Записать(Сайт, ЗадачаОбъект.Ссылка, Перечисления.b24_СобытияОбмена.ОшибкаЗагрузкиВУправлениеЗадачами); 
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат Задача
	
КонецФункции 

Процедура ЗаписатьКомментарии(ЗадачаОбъект, Данные)
	
	ДанныеБитрикса 					= Данные.ДанныеЗадачи;
	КоличествоКомментариевБитрикс 	= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеБитрикса.commentsCount); 
	КоличествоКомментариевТаскер	= ПолучитьКоличествоКомментариевУжеЗагруженныхВЗадачу(ЗадачаОбъект);  
	
	Если КоличествоКомментариевТаскер <> КоличествоКомментариевБитрикс Тогда 
		
		ТаблицаКомментариев = b24_API.Задачи_ПолучитьКомментарииЗадачи(ЗадачаОбъект.НомерВнешнейЗаявки, Данные.Настройки.ПараметрыПодключения); 
		
		Если ТаблицаКомментариев <> Неопределено Тогда 
						
			ДанныеУдаленныхКомментариев = Новый Соответствие;  
			ТаблицаКомментариевЗадачи	= ЗадачаОбъект.Комментарии.Выгрузить();
			
			//удалим ранее загруженные комментарии
			МассивУдаления = Новый Массив;
			
			Для Каждого Строка Из ЗадачаОбъект.Комментарии Цикл 
				
				Если ЗначениеЗаполнено(Строка.b24_ID) Тогда 
					
					МассивУдаления.Добавить(Строка);   

					ДанныеУдаленныхКомментариев[Строка.b24_ID] = ПолучитьДанныеУдаляемойСтрокиКомментарияЗадачи(Строка, ТаблицаКомментариевЗадачи);
					
				КонецЕсли;				
				
			КонецЦикла;
			
			Для Каждого СтрокаУдаления Из МассивУдаления Цикл 
				ЗадачаОбъект.Комментарии.Удалить(СтрокаУдаления);	
			КонецЦикла;         
			
			//загрузим комментарии
			Счетчик = ЗадачаОбъект.Комментарии.Количество() + 1;
			
			Для Каждого Строка Из ТаблицаКомментариев Цикл 
				
				Автор           = ПолучитьПользователя1С(Строка.AUTHOR_ID, Данные.ТаблицаПользователей, Данные.СоответствиеПользователей1С);
				УдаленныеДанные	= ДанныеУдаленныхКомментариев[СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Строка.ID)];
				
				Если Не ЗначениеЗаполнено(Автор) Тогда 
					Автор = Данные.Настройки.ПользовательОбмена;
				КонецЕсли;
				
				НоваяСтрока 				= ЗадачаОбъект.Комментарии.Добавить();
				НоваяСтрока.b24_ID 			= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Строка.ID);
				НоваяСтрока.КлючСтроки      = Счетчик;
				НоваяСтрока.ДатаКомментария = Строка.POST_DATE;
				НоваяСтрока.Автор           = Автор;
				НоваяСтрока.Комментарий     = Строка.POST_MESSAGE; 
				
				Если УдаленныеДанные <> Неопределено Тогда 
					ЗаполнитьЗначенияСвойств(НоваяСтрока, УдаленныеДанные); 
				КонецЕсли;
				
				Счетчик 					= Счетчик + 1;
				
			КонецЦикла;
			
			ЗадачаОбъект.Комментарии.Сортировать("ДатаКомментария");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеУдаляемойСтрокиКомментарияЗадачи(Строка, ТаблицаКомментариевЗадачи)
	
	ДанныеСтроки	= Новый Структура();
	СтрокаТЧ 		= ТаблицаКомментариевЗадачи.Найти(Строка.b24_ID, "b24_ID");
	
	Если ДанныеСтроки <> Неопределено Тогда 
		
		ДанныеСтроки 	= ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЧ); 
		
		Если ДанныеСтроки.Свойство("НомерСтроки") Тогда  
			ДанныеСтроки.Удалить("НомерСтроки");
		КонецЕсли;
		
		Если ДанныеСтроки.Свойство("КлючСтроки") Тогда  
			ДанныеСтроки.Удалить("КлючСтроки");
		КонецЕсли;
		
		Если ДанныеСтроки.Свойство("ДатаКомментария") Тогда  
			ДанныеСтроки.Удалить("ДатаКомментария");
		КонецЕсли;
		
		Если ДанныеСтроки.Свойство("Автор") Тогда  
			ДанныеСтроки.Удалить("Автор");
		КонецЕсли;
		
		Если ДанныеСтроки.Свойство("Комментарий") Тогда  
			ДанныеСтроки.Удалить("Комментарий");
		КонецЕсли;
		
		Если ДанныеСтроки.Свойство("b24_ID") Тогда  
			ДанныеСтроки.Удалить("b24_ID");
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ДанныеСтроки;

КонецФункции

Функция ПолучитьКоличествоКомментариевУжеЗагруженныхВЗадачу(ЗадачаОбъект)
	
	КоличествоКомментариевТаскер = 0;
	
	Для Каждого Строка Из ЗадачаОбъект.Комментарии Цикл 
		Если ЗначениеЗаполнено(Строка.b24_ID) Тогда 
			КоличествоКомментариевТаскер = КоличествоКомментариевТаскер + 1;	
		КонецЕсли;
	КонецЦикла; 
	
	Возврат КоличествоКомментариевТаскер

КонецФункции

Процедура ЗаписатьФайлыЗадачи(ВладелецФайла, Данные)
	
	ТаблицаФайлов = Данные.ТаблицаФайлов; 
	
	Если ТаблицаФайлов <> Неопределено Тогда 
		
		ТаблицаФайлов.Колонки.Добавить("Записан", Новый ОписаниеТипов("Булево"));
		ТаблицаФайлов.Колонки.Добавить("ИмяФайлаСопоставления"); 
		
		Для Каждого Строка Из ТаблицаФайлов Цикл 
			Строка.ИмяФайлаСопоставления = ВРег(Строка.NAME);	
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ВладелецФайла)
			Или ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			Возврат;
		КонецЕсли;
		
		ТипыВладельцев = Метаданные.РегистрыСведений.НаличиеФайлов.Измерения.ОбъектСФайлами.Тип.Типы();
		Если ТипыВладельцев.Найти(ТипЗнч(ВладелецФайла)) <> Неопределено Тогда
			
			МассивФайловЛокальный = РаботаСФайламиСлужебный.ВсеПодчиненныеФайлы(ВладелецФайла); 
			
			//обновляем существующие файлы
			Для Каждого СсылкаНаФайл Из МассивФайловЛокальный Цикл 
				
				ДанныеПрисоединенногоФайла 	= РаботаСФайлами.ДанныеФайла(СсылкаНаФайл);
				ИскомыеФайлы 				= ТаблицаФайлов.НайтиСтроки(Новый Структура("ИмяФайлаСопоставления", ВРег(ДанныеПрисоединенногоФайла.ИмяФайла)));
				
				Если ИскомыеФайлы.Количество() > 0
					И ДанныеПрисоединенногоФайла.Размер <> СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИскомыеФайлы[0].SIZE) Тогда 
					
					ИнформацияОФайле = Новый Структура();
					ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", ПоместитьВоВременноеХранилище(ИскомыеФайлы[0].Данные));
					ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", Неопределено);
					
					РаботаСФайлами.ОбновитьФайл(СсылкаНаФайл, ИнформацияОФайле);
					
				КонецЕсли; 
				
				Если ИскомыеФайлы.Количество() > 0 Тогда 
					ИскомыеФайлы[0].Записан = Истина;	
				КонецЕсли; 
				
			КонецЦикла;
			
			//добавляем новые файлы
			ИскомыеФайлы = ТаблицаФайлов.НайтиСтроки(Новый Структура("Записан", Ложь));
			
			Для Каждого Файл Из ИскомыеФайлы Цикл 
				
				ПараметрыФайла 					= ПолучитьПараметрыФайлаДляЗаписи(ВладелецФайла, Данные, Файл);
				АдресФайлаВоВременномХранилище 	= ПоместитьВоВременноеХранилище(Файл.Данные);
				
				РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище);
				
			КонецЦикла; 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыФайлаДляЗаписи(ВладелецФайла, Данные, Файл)
	
	Пользователь = Данные.Настройки.ПользовательОбмена;
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда 
		Пользователь = Пользователи.ТекущийПользователь();	
	КонецЕсли;
	
	ДанныеИмяФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Файл.NAME, Ложь);
	ДанныеИмяФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ДанныеИмяФайла.Расширение));
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", Пользователь);
	ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецФайла);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ДанныеИмяФайла.ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", ДанныеИмяФайла.РасширениеБезТочки);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	
	Возврат ПараметрыФайла;

КонецФункции

Функция ПолучитьURLВнешнейЗаявки(ПараметрыПодключения, ДанныеБитрикса)
	Возврат СтрШаблон("https://%1/workgroups/group/%2/tasks/task/view/%3/", ПараметрыПодключения["URL"], "0", ДанныеБитрикса.id)
КонецФункции

Функция ПолучитьЗаказчикаПоЗадаче(ДанныеБитрикс, СоответствиеКонтрагентов, ПолеСвязи = "ID")
	Возврат СоответствиеКонтрагентов[СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеБитрикс[ПолеСвязи])]
КонецФункции 

Функция ПолучитьЗаказчика(ДанныеБитрикс, СоответствиеКонтрагентов, ПолеСвязи = "ID")
	
	Отказ		= Ложь;
	Контрагент 	= СоответствиеКонтрагентов[СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеБитрикс[ПолеСвязи])];	
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда 
		
		Контрагент = ЗагрузитьКонтрагента(ДанныеБитрикс, Отказ);
		
		Если Не Отказ Тогда 
			СоответствиеКонтрагентов[СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеБитрикс[ПолеСвязи])] = Контрагент;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Контрагент
	
КонецФункции 

Функция ПолучитьЗаказчикаПоМассивуПользователей(МассивПользователей, СоответствиеКонтрагентов, ПолеСвязи = "ID")
	
	Отказ			= Ложь;
	Контрагент 		= Справочники.узКонтрагенты.ПустаяСсылка(); 
	ДанныеБитрикс	= Неопределено;
	
	Если МассивПользователей.Количество() > 0 Тогда 
		ДанныеБитрикс = МассивПользователей[0];
	КонецЕсли; 
	
	Если ДанныеБитрикс <> Неопределено Тогда   
		
		Контрагент 	= СоответствиеКонтрагентов[СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеБитрикс)];	
		
		Если Не ЗначениеЗаполнено(Контрагент) Тогда 
			
			Контрагент = ЗагрузитьКонтрагента(ДанныеБитрикс, Отказ);
			
			Если Не Отказ Тогда 
				СоответствиеКонтрагентов[СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеБитрикс[ПолеСвязи])] = Контрагент;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Контрагент
	
КонецФункции 

Функция ЗагрузитьКонтрагента(ДанныеБитрикс, Отказ)
	
	Попытка
		
		КонтрагентОбъект				= Справочники.узКонтрагенты.СоздатьЭлемент();
		КонтрагентОбъект.b24_ID			= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеБитрикс.ID);
		КонтрагентОбъект.Наименование 	= СтрШаблон("%1 %2 %3", ДанныеБитрикс.LAST_NAME, ДанныеБитрикс.NAME, ДанныеБитрикс.SECOND_NAME);
		
		Если ЗначениеЗаполнено(ДанныеБитрикс.EMAIL) Тогда 
			
			Если Не ЗначениеЗаполнено(КонтрагентОбъект.Наименование) Тогда 
				КонтрагентОбъект.Наименование = ДанныеБитрикс.EMAIL;	
			КонецЕсли;
			
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(КонтрагентОбъект, ДанныеБитрикс.EMAIL, Справочники.ВидыКонтактнойИнформации.узEmailКонтрагенты); 
			
		Иначе 
			Отказ = Истина;
			ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ЗагрузитьКонтрагента", УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон("Не заполнен EMAIL у пользователя %1", КонтрагентОбъект.Наименование));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеБитрикс.PERSONAL_MOBILE) Тогда 
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(КонтрагентОбъект, ДанныеБитрикс.PERSONAL_MOBILE, Справочники.ВидыКонтактнойИнформации.узТелефонКонтрагенты);  
		КонецЕсли;
		
		КонтрагентОбъект.УстановитьНовыйКод();
		КонтрагентОбъект.Записать(); 
		
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ЗагрузитьКонтрагента", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат КонтрагентОбъект.Ссылка
	
КонецФункции

Процедура ОбновитьКонтрагентов(Настройки, Сайт, ТаблицаПользователей, СоответствиеКонтрагентов, Отказ)
	
	СоответствиеДанныхОбновления 	= Новый Соответствие;
	МассивКонтрагентов				= Новый Массив;  
	
	Для Каждого СтрокаПользователь Из ТаблицаПользователей Цикл 
		
		Контрагент = СоответствиеКонтрагентов[СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаПользователь.ID)];
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			МассивКонтрагентов.Добавить(Контрагент);	
		КонецЕсли;
	КонецЦикла;  
	
	СоответствиеРеквизитовКонтрагентов = ПолучитьДанныеКонтрагентовПоМассиву(Сайт, МассивКонтрагентов);
	
	Если ИспользоватьОбмен(Настройки, Метаданные.Справочники.узКонтрагенты) Тогда 
		
		//обновить признак уволен                                          
		Для Каждого СтрокаПользователь Из ТаблицаПользователей Цикл 
			
			Контрагент = СоответствиеКонтрагентов[СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаПользователь.ID)];
			
			Если ЗначениеЗаполнено(Контрагент) Тогда  
				
				ДанныеРеквизитов = СоответствиеРеквизитовКонтрагентов[Контрагент];
				
				Если Не СтрокаПользователь.ACTIVE
					И Не ДанныеРеквизитов.b24_Уволен Тогда 
					
					СоответствиеДанныхОбновления[Контрагент] = Новый Структура("b24_Уволен", Истина);
					
				ИначеЕсли СтрокаПользователь.ACTIVE
					И ДанныеРеквизитов.b24_Уволен Тогда 
					
					СоответствиеДанныхОбновления[Контрагент] = Новый Структура("b24_Уволен", Ложь);   
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
		//обновим ФИО  
		Для Каждого СтрокаПользователь Из ТаблицаПользователей Цикл 
			
			Контрагент = СоответствиеКонтрагентов[СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаПользователь.ID)];
			
			Если ЗначениеЗаполнено(Контрагент) Тогда 
				
				ДанныеРеквизитов 	= СоответствиеРеквизитовКонтрагентов[Контрагент]; 
				ФИОБитрикс			= СтрШаблон("%1 %2 %3", СтрокаПользователь.LAST_NAME, СтрокаПользователь.NAME, СтрокаПользователь.SECOND_NAME);  
				
				Если ФИОБитрикс <> ДанныеРеквизитов.Наименование Тогда 
					
					ДанныеОбновления = СоответствиеДанныхОбновления[Контрагент];
					
					Если ДанныеОбновления = Неопределено Тогда 
						ДанныеОбновления = Новый Структура();
					КонецЕсли;
					
					ДанныеОбновления.Вставить("Наименование", ФИОБитрикс);
					
					СоответствиеДанныхОбновления[Контрагент] = ДанныеОбновления;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;  
		
		//обновим подразделение 
		Для Каждого СтрокаПользователь Из ТаблицаПользователей Цикл 
			
			Контрагент = СоответствиеКонтрагентов[СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаПользователь.ID)];
			
			Если ЗначениеЗаполнено(Контрагент) Тогда 
				
				ДанныеРеквизитов 				= СоответствиеРеквизитовКонтрагентов[Контрагент];
				ПодразделениеКонтрагент	 		= ДанныеРеквизитов.b24_Подразделение;
				ПодразделениеПользователя	 	= ПолучитьПодразделениеПользователя(СтрокаПользователь);
				
				Если ПодразделениеПользователя <> ПодразделениеКонтрагент Тогда 
					
					ДанныеОбновления = СоответствиеДанныхОбновления[Контрагент];
					
					Если ДанныеОбновления = Неопределено Тогда 
						ДанныеОбновления = Новый Структура();
					КонецЕсли;
					
					ДанныеОбновления.Вставить("b24_Подразделение", ПодразделениеПользователя);
					
					СоответствиеДанныхОбновления[Контрагент] = ДанныеОбновления;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;  
		
		//обновить емайл
		Для Каждого СтрокаПользователь Из ТаблицаПользователей Цикл 
			
			Контрагент = СоответствиеКонтрагентов[СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаПользователь.ID)];
			
			Если ЗначениеЗаполнено(Контрагент) Тогда 
				
				ДанныеРеквизитов = СоответствиеРеквизитовКонтрагентов[Контрагент];
				
				Если ДанныеРеквизитов.Емайл <> СтрокаПользователь.EMAIL Тогда 
					
					ДанныеОбновления = СоответствиеДанныхОбновления[Контрагент];
					
					Если ДанныеОбновления = Неопределено Тогда 
						ДанныеОбновления = Новый Структура();
					КонецЕсли;
					
					ДанныеОбновления.Вставить("Емайл", СтрокаПользователь.EMAIL);
					
					СоответствиеДанныхОбновления[Контрагент] = ДанныеОбновления;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;  
		
		Для Каждого Элемент Из СоответствиеДанныхОбновления Цикл 
			
			ДанныеОбновления = Элемент.Значение;
			
			Попытка
				
				КонтрагентОбъект = Элемент.Ключ.ПолучитьОбъект(); 
				КонтрагентОбъект.УстановитьПометкуУдаления(Ложь);
				
				Если ДанныеОбновления.Свойство("Наименование") Тогда 
					КонтрагентОбъект.Наименование = ДанныеОбновления.Наименование;	
				КонецЕсли;
				
				Если ДанныеОбновления.Свойство("b24_Уволен") Тогда 
					КонтрагентОбъект.b24_Уволен = ДанныеОбновления.b24_Уволен;	
				КонецЕсли;
				
				Если ДанныеОбновления.Свойство("b24_Подразделение") Тогда 
					КонтрагентОбъект.b24_Подразделение = ДанныеОбновления.b24_Подразделение;	
				КонецЕсли;
				
				Если ДанныеОбновления.Свойство("Емайл") Тогда 
					УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(КонтрагентОбъект, ДанныеОбновления.Емайл, Справочники.ВидыКонтактнойИнформации.узEmailКонтрагенты);	
				КонецЕсли;
				
				КонтрагентОбъект.Записать();   
				
				РегистрыСведений.b24_ИсторияОбменаОбъектов.Записать(Сайт, КонтрагентОбъект.Ссылка, Перечисления.b24_СобытияОбмена.ЗагруженВУправлениеЗадачами);
				
			Исключение
				
				Отказ = Истина;
				ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ОбновитьКонтрагентов", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));  
				РегистрыСведений.b24_ИсторияОбменаОбъектов.Записать(Сайт, КонтрагентОбъект.Ссылка, Перечисления.b24_СобытияОбмена.ОшибкаЗагрузкиВУправлениеЗадачами);
				
			КонецПопытки;		
			
		КонецЦикла;   
		
	КонецЕсли; 
	
	//идентификаторы объектов  
	Для Каждого СтрокаПользователь Из ТаблицаПользователей Цикл 
		
		Контрагент = СоответствиеКонтрагентов[СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаПользователь.ID)];
		
		Если ЗначениеЗаполнено(Контрагент) Тогда 
			
			ДанныеРеквизитов = СоответствиеРеквизитовКонтрагентов[Контрагент]; 
			
			Если Не ДанныеРеквизитов.ЕстьИдентификатор Тогда 			
				РегистрыСведений.b24_ИдентификаторыОбъектов.Обновить(Сайт, Контрагент, СтрокаПользователь.ID); 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры  

Процедура ПометитьНаУдалениеНеИспользуемыхКонтрагентов(Настройки, Сайт, МассивID, СоответствиеКонтрагентов, Отказ)

	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	b24_ИдентификаторыОбъектов.Ссылка КАК Ссылка,
		|	b24_ИдентификаторыОбъектов.ID КАК ID
		|ИЗ
		|	РегистрСведений.b24_ИдентификаторыОбъектов КАК b24_ИдентификаторыОбъектов
		|ГДЕ
		|	b24_ИдентификаторыОбъектов.Ссылка ССЫЛКА Справочник.узКонтрагенты
		|	И b24_ИдентификаторыОбъектов.Сайт = &Сайт
		|	И НЕ b24_ИдентификаторыОбъектов.ID В (&МассивID)
		|	И НЕ b24_ИдентификаторыОбъектов.Ссылка.ПометкаУдаления");

	Запрос.УстановитьПараметр("МассивID", МассивID);
	Запрос.УстановитьПараметр("Сайт", Сайт);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КонтрагентОбъект = Выборка.Ссылка.ПолучитьОбъект(); 
		КонтрагентОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Выгрузка

Процедура ЗаписатьОбъектВВыгружаемыеОбъекты(Объект, Отказ, ДополнительныеСвойства = Неопределено) Экспорт 
	
	Тип = ТипЗнч(Объект);
	
	//узЗадачи
	Если Не Отказ
		И Тип = Тип("СправочникОбъект.узЗадачи") Тогда
		
		Выгружать						= Ложь;
		ЭтоВнешняяЗадача 				= ЗначениеЗаполнено(Объект.НомерВнешнейЗаявки);
		ЭтоСобытиеЗагрузкиИзБитрикс24 	= Объект.ДополнительныеСвойства.Свойство("ЗадачаЗагруженаИзРасширенияИнтеграцияБитрикс24") И Объект.ДополнительныеСвойства.ЗадачаЗагруженаИзРасширенияИнтеграцияБитрикс24 = Истина;
		ТребуетВыгрузкиВБитрикс24		= Объект.ДополнительныеСвойства.Свойство("ТребуетВыгрузкиВБитрикс24");
		МассивСайтов					= РегистрыСведений.b24_СостоянияОбменаЗадач.ПолучитьМассивСайтовЗадачи(Объект.Ссылка);
		
		//если это загрузка задачи, то не фиксируем для обмена
		Если ЭтоВнешняяЗадача
			И ЭтоСобытиеЗагрузкиИзБитрикс24 Тогда 
			Выгружать = Ложь;	
		КонецЕсли;
		
		//если это событие описано как требует выгрузки, то фиксируем для обмена
		Если ЭтоВнешняяЗадача
			И ТребуетВыгрузкиВБитрикс24 Тогда 
			Выгружать = Истина;	
		КонецЕсли; 
		
		//если это просто запись, то фиксируем для обмена 
		Если ЭтоВнешняяЗадача
			И Не ЭтоСобытиеЗагрузкиИзБитрикс24 Тогда 
			Выгружать = Истина;	
		КонецЕсли; 
		
		Если Выгружать И МассивСайтов.Количество() > 0 Тогда 	
			
			Сайт = МассивСайтов[0];
			
			РегистрыСведений.b24_ВыгружаемыеОбъекты.Записать(Сайт, Объект.Ссылка);
			РегистрыСведений.b24_ИсторияОбменаОбъектов.Записать(Сайт, Объект.Ссылка, Перечисления.b24_СобытияОбмена.ДобавленВОчередьОбмена);
			
			Если РегистрыСведений.b24_НастройкиИнтеграций.ОбменВыполняется(Сайт) Тогда 
				РегистрыСведений.b24_ЗаблокированныеОбъектыДляЗагрузки.Записать(Сайт, Объект.Ссылка);	
			КонецЕсли;
			
		КонецЕсли;   
		
	ИначеЕсли Не Отказ
		И Тип = Тип("СправочникСсылка.узЗадачи") Тогда     
		
		Выгружать						= Ложь;
		ТребуетВыгрузкиВБитрикс24		= ДополнительныеСвойства.Свойство("ТребуетВыгрузкиВБитрикс24"); 
		СайтВыгрузки					= Справочники.b24_СайтИнтеграции.ПустаяСсылка();
		
		Если ТребуетВыгрузкиВБитрикс24 Тогда 
			СайтВыгрузки = ДополнительныеСвойства.ТребуетВыгрузкиВБитрикс24;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СайтВыгрузки) Тогда 
			ВызватьИсключение "Не указан сайт выгрузки";
		КонецЕсли;
		
		Если ТребуетВыгрузкиВБитрикс24 Тогда 
			Выгружать = Истина;	
		КонецЕсли; 
		
		Если Выгружать Тогда 	
			
			РегистрыСведений.b24_ВыгружаемыеОбъекты.Записать(СайтВыгрузки, Объект);	 
			РегистрыСведений.b24_ИсторияОбменаОбъектов.Записать(СайтВыгрузки, Объект, Перечисления.b24_СобытияОбмена.ДобавленВОчередьОбмена);
			
			Если РегистрыСведений.b24_НастройкиИнтеграций.ОбменВыполняется(СайтВыгрузки) Тогда 
				РегистрыСведений.b24_ЗаблокированныеОбъектыДляЗагрузки.Записать(СайтВыгрузки, Объект);	
			КонецЕсли;		
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры  

Процедура ВыполнитьВыгрузку(Сайт, Ссылка = Неопределено, Кэш, Отказ) Экспорт
	
	Настройки 					= Кэш.Настройки[Сайт];
	МассивВыгружаемыхОбъектов 	= Новый Массив; 
	
	Если Ссылка <> Неопределено Тогда 
		МассивВыгружаемыхОбъектов.Добавить(Ссылка);	
	Иначе 
		МассивВыгружаемыхОбъектов = РегистрыСведений.b24_ВыгружаемыеОбъекты.ПолучитьМассивВыгружаемыхОбъектов(Сайт);	
	КонецЕсли; 
	
	Для Каждого СсылкаВыгрузки Из МассивВыгружаемыхОбъектов Цикл 
		
		Тип = ТипЗнч(СсылкаВыгрузки); 
		
		Если Тип = Тип("СправочникСсылка.узЗадачи")
			И ИспользоватьОбмен(Настройки, Метаданные.Справочники.узЗадачи, "Выгрузка") Тогда
			
			ВыгрузитьЗадачу(Сайт, СсылкаВыгрузки, Кэш, Отказ); 
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьЗадачу(Сайт, СсылкаВыгрузки, Кэш, Отказ)
	
	Попытка
		
		ИдентификаторВнешнейЗадачиЗаполнен 	= ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаВыгрузки, "НомерВнешнейЗаявки"));   
		РезультатВыгрузки					= Новый Структура("Результат, Сообщение", Истина, СтрШаблон("Не удалось выгрузить объект. тип - %1, ссылка - %2.", ТипЗнч(СсылкаВыгрузки), СсылкаВыгрузки));
		СостоянияОбменаСайта				= Кэш.СостоянияОбменаЗадач[Сайт];  
		СостояниеЗадачи						= Неопределено;
		
		Если СостоянияОбменаСайта <> Неопределено Тогда 
			СостояниеЗадачи					= СостоянияОбменаСайта[ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаВыгрузки, "НомерВнешнейЗаявки")];
		КонецЕсли;
		
		Если ИдентификаторВнешнейЗадачиЗаполнен Тогда //это повторная загрузка 
			
			Если СостояниеЗадачи <> Неопределено Тогда  
				
				МассивСайтов = РегистрыСведений.b24_СостоянияОбменаЗадач.ПолучитьМассивСайтовЗадачи(СсылкаВыгрузки);
				
				Если МассивСайтов.Найти(Сайт) <> Неопределено Тогда 
					
					Настройки 				= Кэш.Настройки[Сайт];
					ТаблицаПользователей 	= ПолучитьПользователейБитрикса(Кэш, Сайт, Настройки);
					
					ВыгрузитьРеквизитыЗадачи(Сайт, СсылкаВыгрузки, Настройки, ТаблицаПользователей, Кэш, РезультатВыгрузки);
					ВыгрузитьКомментарииЗадачи(Сайт, СсылкаВыгрузки, Настройки, Кэш, РезультатВыгрузки);
					
				КонецЕсли;
			КонецЕсли; 
			
		Иначе //это новая задача 
			
			Настройки 				= Кэш.Настройки[Сайт];
			ТаблицаПользователей 	= ПолучитьПользователейБитрикса(Кэш, Сайт, Настройки);  
			
			ВыгрузитьНовуюЗадачу(Сайт, СсылкаВыгрузки, Настройки, ТаблицаПользователей, Кэш, РезультатВыгрузки);  
			
			Если РезультатВыгрузки.Результат Тогда 
				ВыгрузитьКомментарииЗадачи(Сайт, СсылкаВыгрузки, Настройки, Кэш, РезультатВыгрузки); 
			КонецЕсли;
			
		КонецЕсли;
		
		Если РезультатВыгрузки.Результат Тогда 
			РегистрыСведений.b24_ВыгружаемыеОбъекты.Удалить(Сайт, СсылкаВыгрузки);
			РегистрыСведений.b24_ИсторияОбменаОбъектов.Записать(Сайт, СсылкаВыгрузки, Перечисления.b24_СобытияОбмена.ЗагруженБитрикс24);
		Иначе 
			
			Отказ = Истина;
			ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ВыгрузитьЗадачу", 
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.узЗадачи, СсылкаВыгрузки, РезультатВыгрузки.Сообщение); 
			
			РегистрыСведений.b24_ИсторияОбменаОбъектов.Записать(Сайт, СсылкаВыгрузки, Перечисления.b24_СобытияОбмена.ОшибкаЗагрузкиВБитрикс24);
			
		КонецЕсли;   
		
	Исключение
		
		Отказ = Истина;
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ВыгрузитьЗадачу", 
		УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.узЗадачи, СсылкаВыгрузки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		
		РегистрыСведений.b24_ИсторияОбменаОбъектов.Записать(Сайт, СсылкаВыгрузки, Перечисления.b24_СобытияОбмена.ОшибкаЗагрузкиВБитрикс24);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыгрузитьНовуюЗадачу(Сайт, СсылкаВыгрузки, Настройки, ТаблицаПользователей, Кэш, РезультатВыгрузки)
	
	ЗадачаИзменена = Ложь;
	ДанныеОтправки = ПолучитьСтруктуруОтправкиЗадачи(СсылкаВыгрузки, Настройки, ТаблицаПользователей, Кэш);
		
	//отправляем задачу
	Результат = b24_API.Задачи_ДобавитьЗадачу(ДанныеОтправки, Настройки.ПараметрыПодключения);
	
	Если Результат.Свойство("ЗадачаВыгружена")
		И Результат.ЗадачаВыгружена = Истина Тогда 
		
		//записываем результат в задачу  
		Попытка
			
			ЗадачаОбъект 					= СсылкаВыгрузки.ПолучитьОбъект();
			ЗадачаОбъект.Заблокировать();
			
			ЗадачаОбъект.НомерВнешнейЗаявки = Результат.Данные.id; 
			ЗадачаОбъект.URLВнешнейЗаявки 	= ПолучитьURLВнешнейЗаявки(Настройки.ПараметрыПодключения, Результат.Данные); 
			ЗадачаОбъект.Записать();
			
			ЗадачаИзменена = Истина;
			
		Исключение
			РезультатВыгрузки.Результат = Ложь;
		КонецПопытки;
		
		//записываем состояние 
		Если РезультатВыгрузки.Результат Тогда 
			РегистрыСведений.b24_СостоянияОбменаЗадач.Записать(Сайт, СсылкаВыгрузки, Макс(Результат.Данные.activityDate, Результат.Данные.changedDate));
		КонецЕсли;
		
	Иначе 	
		РезультатВыгрузки.Результат = Ложь;
	КонецЕсли; 
	
	Если Результат.Свойство("ЗадачаВыгружена")
		И Результат.ЗадачаВыгружена = Истина
		И Не РезультатВыгрузки.Результат Тогда 
		
		Результат = b24_API.Задачи_УдалитьЗадачу(Результат.Данные.id, Настройки.ПараметрыПодключения); 
		
		Если ЗадачаИзменена Тогда 
			Попытка
				
				ЗадачаОбъект 					= СсылкаВыгрузки.ПолучитьОбъект();
				ЗадачаОбъект.Заблокировать();
				
				ЗадачаОбъект.НомерВнешнейЗаявки = ""; 
				ЗадачаОбъект.URLВнешнейЗаявки 	= ""; 
				ЗадачаОбъект.Записать();
				
			Исключение
				РезультатВыгрузки.Результат = Ложь;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыгрузитьРеквизитыЗадачи(Сайт, СсылкаВыгрузки, Настройки, ТаблицаПользователей, Кэш, РезультатВыгрузки)
	
	//получаем данные задачи
	//сравнием список полей для обмена, если поле изменено по состянию битрикса, то добавлем в список обновления для битрикса 
	ТребуетсяВыгрузка	= Истина;
	ДанныеОбновления 	= Новый Соответствие();
	ДанныеСсылки		= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаВыгрузки, "Наименование, НомерВнешнейЗаявки, Исполнитель, СрокИсполнения, Статус");
	TASKID				= ДанныеСсылки.НомерВнешнейЗаявки;
	TASKID				= Формат(TASKID, "ЧГ=0");
	
	ДанныеБитрикса 		= b24_API.Задачи_ПолучитьЗадачу(TASKID, Настройки.ПараметрыПодключения); 
	
	Если ДанныеБитрикса = Неопределено Тогда 
		
		ТребуетсяВыгрузка = Ложь;
		
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ВыгрузитьРеквизитыЗадачи", 
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.узЗадачи, СсылкаВыгрузки, СтрШаблон("Нет данных задачи по ID - %1", TASKID)); 
		
	Иначе 
		
		Статус				= ПолучитьСтатусЗадачи(ДанныеБитрикса.status, Настройки.Статусы); 
		ВидСтатуса			= Справочники.узСтатусыЗадачи.ПустаяСсылка();
		
		Если ЗначениеЗаполнено(Статус) Тогда 
			ВидСтатуса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статус, "ВидСтатуса");
		КонецЕсли; 
		
		Если ВидСтатуса = Справочники.узВидыСтатусов.Готово Тогда 
			ТребуетсяВыгрузка = Ложь;	
		КонецЕсли;
		
	КонецЕсли;
		
	//не удается отменять задачи. Битрикс 24 запрещает
	Если ДанныеСсылки.Статус = Справочники.узСтатусыЗадачи.Отменена Тогда 
		ДанныеСсылки.Статус = Справочники.узСтатусыЗадачи.Готово;	
	КонецЕсли;
	
	Если ДанныеБитрикса <> Неопределено
		И ТребуетсяВыгрузка Тогда 
		
		//Отвественный
		ОтвественныйБитрикс 		= ПолучитьПользователя1С(ДанныеБитрикса.responsibleId, ТаблицаПользователей, Кэш.СоответствиеПользователей1С);

		Если ЗначениеЗаполнено(ДанныеСсылки.Исполнитель)
			И ОтвественныйБитрикс <> ДанныеСсылки.Исполнитель Тогда 
			
			RESPONSIBLE_ID = ПолучитьIDПользователя(ДанныеСсылки.Исполнитель, ТаблицаПользователей);
			
			Если RESPONSIBLE_ID <> Неопределено Тогда 
				ДанныеОбновления["RESPONSIBLE_ID"] = RESPONSIBLE_ID;
			КонецЕсли;
			
		КонецЕсли;
		
		//Наименование
		Если СокрЛП(ВРег(ДанныеБитрикса.TITLE)) <> СокрЛП(ВРег(ДанныеСсылки.Наименование)) Тогда  
			ДанныеОбновления["TITLE"] = ДанныеСсылки.Наименование;
		КонецЕсли;
		
		//СрокИсполнения
		Если ДанныеБитрикса.DEADLINE <> ДанныеСсылки.СрокИсполнения Тогда  
			ДанныеОбновления["DEADLINE"] = b24_API.ДатуВJSON(ДанныеСсылки.СрокИсполнения);
		КонецЕсли;
		
		//Статус
		СтатусБитрикс = ПолучитьСтатусЗадачи(ДанныеБитрикса.status, Настройки.Статусы);
		
		Если СтатусБитрикс <> ДанныеСсылки.Статус Тогда 
			
			СтатусОбновления = ПолучитьЧисловоеЗначениеСтатуса(ДанныеСсылки.Статус, Настройки.Статусы);
			
			Если СтатусОбновления <> Неопределено Тогда
				ДанныеОбновления["status"] = СтатусОбновления;
			КонецЕсли;
		КонецЕсли;   
		
		//проверим на возможность обмена статуса
		МассивОбменаСтатусами = b24_API.ПолучитьМассивВозможныхОбменовСтатусов(); 
		
		Если ДанныеОбновления["status"] <> Неопределено
			И МассивОбменаСтатусами.Найти(ДанныеОбновления["status"]) = Неопределено Тогда 
			ДанныеОбновления.Удалить("status");	
		КонецЕсли;
		
		Если ДанныеОбновления.Количество() > 0 Тогда 
			
			Если ДанныеБитрикса.status = "5"
				Или ДанныеБитрикса.status = "6"
				Или ДанныеБитрикса.status = "7" Тогда 
				ВозобновитьЗадачу = Истина; 
			Иначе 
				ВозобновитьЗадачу = Ложь; 
			КонецЕсли;
			
			Результат = b24_API.Задачи_ОбновитьЗадачу(TASKID, ДанныеОбновления, ВозобновитьЗадачу, Настройки.ПараметрыПодключения);   
			
			Если Результат = Неопределено Тогда 
				
				РезультатВыгрузки.Результат = Ложь;
				РезультатВыгрузки.Сообщение = СтрШаблон("%1%2%3", РезультатВыгрузки.Сообщение, Символы.ПС, "Не удалось выгрузить поля задачи или его статус");  
				
			ИначеЕсли Результат <> Неопределено 
				И ДанныеОбновления["status"] <> Неопределено
				И ДанныеОбновления["status"] <> Результат.status Тогда 
				
				РезультатВыгрузки.Результат = Ложь;
				РезультатВыгрузки.Сообщение = СтрШаблон("%1%2%3", РезультатВыгрузки.Сообщение, Символы.ПС, "Не удалось выгрузить статус задачи");  
				
			Иначе 
				РегистрыСведений.b24_СостоянияОбменаЗадач.Записать(Сайт, СсылкаВыгрузки, Результат.changedDate); 
			КонецЕсли;			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьКомментарииЗадачи(Сайт, СсылкаВыгрузки, Настройки, Кэш, РезультатВыгрузки)
	
	ТаблицаВыгрузки = ПолучитьТаблицуВыгружаемыхКомментариев(СсылкаВыгрузки);
	
	Если ТаблицаВыгрузки.Количество() > 0 Тогда 
		
		Попытка
			
			ОбъектВыгрузки = СсылкаВыгрузки.ПолучитьОбъект();
			ОбъектВыгрузки.Заблокировать(); 
			
			ОбъектИзменен = Ложь;
			
			Для Каждого Строка Из ТаблицаВыгрузки Цикл 
				
				ID 				= РегистрыСведений.b24_ИдентификаторыОбъектов.Идентификатор(Сайт, Строка.Автор);
				
				Если ID = Неопределено Тогда  
					РезультатВыгрузки.Результат = Ложь;
					РезультатВыгрузки.Сообщение = СтрШаблон("%1%2%3", РезультатВыгрузки.Сообщение, Символы.ПС, СтрШаблон("Не заполнен ID у пользователя: %1", Строка.Автор));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ID) Тогда 
					
					ДанныеОтправки = Новый Структура();
					ДанныеОтправки.Вставить("ID", ID);
					ДанныеОтправки.Вставить("Сообщение", Строка.Комментарий);
					
					Результат = b24_API.Задачи_ДобавитьКомментарий(Формат(ОбъектВыгрузки.НомерВнешнейЗаявки, "ЧГ=0"), ДанныеОтправки, Настройки.ПараметрыПодключения);
					
					Если Результат <> Неопределено Тогда 
						ОбъектВыгрузки.Комментарии[Строка.НомерСтроки - 1].b24_ID = Результат;
						ОбъектИзменен = Истина;
					Иначе 
						РезультатВыгрузки.Результат = Ложь;
						РезультатВыгрузки.Сообщение = СтрШаблон("%1%2%3", РезультатВыгрузки.Сообщение, Символы.ПС, "Не удалось выгрузить комментарии задачи");
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла; 
			
			Если ОбъектИзменен Тогда 
				ОбъектВыгрузки.Записать();
			КонецЕсли;
			
		Исключение 
			
			РезультатВыгрузки.Результат = Ложь;
			РезультатВыгрузки.Сообщение = СтрШаблон("%1%2%3", РезультатВыгрузки.Сообщение, Символы.ПС, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуВыгружаемыхКомментариев(Ссылка)
	
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узЗадачиКомментарии.НомерСтроки КАК НомерСтроки,
	|	узЗадачиКомментарии.ДатаКомментария КАК ДатаКомментария,
	|	узЗадачиКомментарии.Автор КАК Автор,
	|	узЗадачиКомментарии.Комментарий КАК Комментарий
	|ИЗ
	|	Справочник.узЗадачи.Комментарии КАК узЗадачиКомментарии
	|ГДЕ
	|	узЗадачиКомментарии.Ссылка = &Ссылка
	|	И узЗадачиКомментарии.b24_ID = 0";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	ТаблицаВыгрузки 	= РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаВыгрузки;

КонецФункции

Функция ПолучитьСтруктуруОтправкиЗадачи(Задача, Настройки, ТаблицаПользователей, Кэш)

	Данные 			= Новый Структура();
	ДанныеСсылки 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, Новый Структура("Наименование, Автор, Исполнитель, СрокИсполнения, ДатаСоздания, ТекстСодержания, КонтрагентID, Статус, Важность", 
						"Наименование", "Автор", "Исполнитель", "СрокИсполнения", "ДатаСоздания", "ТекстСодержания", "Контрагент.b24_ID", "Статус", "Важность"));
	
	Данные.Вставить("TITLE", ДанныеСсылки.Наименование);
	Данные.Вставить("STATUS", "1");
	
	Если ЗначениеЗаполнено(ДанныеСсылки.ТекстСодержания) Тогда 
		Данные.Вставить("DESCRIPTION", ДанныеСсылки.ТекстСодержания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСсылки.ДатаСоздания) Тогда 
		Данные.Вставить("CREATED_DATE", b24_API.ДатуВJSON(ДанныеСсылки.ДатаСоздания));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСсылки.СрокИсполнения) Тогда 
		Данные.Вставить("DEADLINE", b24_API.ДатуВJSON(ДанныеСсылки.СрокИсполнения));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСсылки.КонтрагентID) Тогда 
		
		Заказчик = Неопределено;
		
		Если Не ЗначениеЗаполнено(Настройки.ВидЗаказчика) Тогда 
			
			ПолеЗаполнения 	= "CREATED_BY";  
			Заказчик		= ДанныеСсылки.КонтрагентID;
			
		ИначеЕсли Настройки.ВидЗаказчика = Перечисления.b24_ВидПользователя.Постановщик Тогда 
			
			ПолеЗаполнения 	= "CREATED_BY"; 
			Заказчик		= ДанныеСсылки.КонтрагентID;
			
		ИначеЕсли Настройки.ВидЗаказчика = Перечисления.b24_ВидПользователя.Отвественный Тогда 
			
			ПолеЗаполнения 	= "RESPONSIBLE_ID"; 
			Заказчик		= ДанныеСсылки.КонтрагентID;
			
		ИначеЕсли Настройки.ВидЗаказчика = Перечисления.b24_ВидПользователя.Соисполнитель Тогда 
			
			ПолеЗаполнения 	= "ACCOMPLICES"; 
			Заказчик		= Новый Массив;
			Заказчик.Добавить(ДанныеСсылки.КонтрагентID);
			
		ИначеЕсли Настройки.ВидЗаказчика = Перечисления.b24_ВидПользователя.Наблюдатель Тогда 
			
			ПолеЗаполнения 	= "AUDITORS"; 
			Заказчик		= Новый Массив;
			Заказчик.Добавить(ДанныеСсылки.КонтрагентID);
			
		КонецЕсли;		
		
		Данные.Вставить(ПолеЗаполнения, Заказчик);

	КонецЕсли;  
	
	Если ЗначениеЗаполнено(ДанныеСсылки.Автор)
		И Не Данные.Свойство("CREATED_BY") Тогда 
		
		ID_Автор = ПолучитьIDПользователя(ДанныеСсылки.Автор, ТаблицаПользователей); 
		
		Если ЗначениеЗаполнено(ID_Автор) Тогда 
			Данные.Вставить("CREATED_BY", ID_Автор);
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДанныеСсылки.Исполнитель)
		И Не Данные.Свойство("RESPONSIBLE_ID") Тогда 
		
		ID_Исполнитель = ПолучитьIDПользователя(ДанныеСсылки.Исполнитель, ТаблицаПользователей); 
		
		Если ЗначениеЗаполнено(ID_Исполнитель) Тогда 
			Данные.Вставить("RESPONSIBLE_ID", ID_Исполнитель);
		КонецЕсли; 
		
	Иначе 
		
		ID_Исполнитель = ПолучитьIDПользователя(Настройки.ПользовательОбмена, ТаблицаПользователей); 
		
		Если ЗначениеЗаполнено(ID_Исполнитель) Тогда 
			Данные.Вставить("RESPONSIBLE_ID", ID_Исполнитель);
		КонецЕсли;    
		
	КонецЕсли;  
	
	Если ЗначениеЗаполнено(ДанныеСсылки.Важность) Тогда 
		
		Если ДанныеСсылки.Важность = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.узВариантыВажностиЗадачи.Низкая") Тогда 
			Данные.Вставить("PRIORITY", "PRIORITY_LOW"); 
		ИначеЕсли ДанныеСсылки.Важность = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.узВариантыВажностиЗадачи.Обычная") Тогда
			Данные.Вставить("PRIORITY", "PRIORITY_AVERAGE"); 
		ИначеЕсли ДанныеСсылки.Важность = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.узВариантыВажностиЗадачи.Высокая") Тогда
			Данные.Вставить("PRIORITY", "PRIORITY_HIGH"); 
		КонецЕсли;
		
	КонецЕсли;  
	
	//добавляем обязательные поля
	ОбязательныеРеквизиты = Настройки.ПараметрыПодключения["ОбязательныеРеквизитыЗадачи"];
	
	Для Каждого ОбязательныйРеквизит Из ОбязательныеРеквизиты Цикл 
		Если ВСтрокеТолькоДопустимыеСимволы(ОбязательныйРеквизит.Ключ) Тогда 	
			Данные.Вставить(ОбязательныйРеквизит.Ключ, ОбязательныйРеквизит.Значение);  
		КонецЕсли;
	КонецЦикла;
	
	//добавляем фильтры            
	Фильтры = Настройки.ПараметрыПодключения["ФильтрыЗадачи"];
	
	Для Каждого СтрокаФильтр Из Фильтры Цикл 
		Если СтрокаФильтр.ВидСравнения = Перечисления.b24_ВидСравнения.Равно
			И ВСтрокеТолькоДопустимыеСимволы(СтрокаФильтр.Ключ) Тогда 	
			Данные.Вставить(СтрокаФильтр.Ключ, СтрокаФильтр.Значение); 
		КонецЕсли;
	КонецЦикла;  
	
	Если Данные.Свойство("TAG")
		И ЗначениеЗаполнено(Данные.TAG) Тогда 
		
		Если Данные.Свойство("TAGS") Тогда 
			МассивТегов = Данные.TAGS;
		Иначе 
			МассивТегов = Новый Массив;	
		КонецЕсли;                     
		
		МассивТегов.Добавить(Данные.TAG); 
		МассивТегов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивТегов);
		
		Данные.Вставить("TAGS", МассивТегов);
		
	КонецЕсли;
	
	Возврат Данные
	
КонецФункции

Функция ПередатьЗадачу(Задача, Сайт) Экспорт 
	
	Результат				= Ложь;
	Отказ 					= Ложь;
	ТекущийСайт 			= Справочники.b24_СайтИнтеграции.ПустаяСсылка(); 
	МассивОбменаСтатусами 	= b24_API.ПолучитьМассивВозможныхОбменовСтатусов(); 
	
	//проверим на возможность отправки 
	ПроверитьВозможностьПередачиЗадачи(Задача, Сайт, Отказ);
	
	Если НЕ Отказ Тогда 
		
		ТекущийМассивСайтов = РегистрыСведений.b24_СостоянияОбменаЗадач.ПолучитьМассивСайтовЗадачи(Задача); 
		
		Если ТекущийМассивСайтов.Количество() > 0 Тогда 
			ТекущийСайт 	= ТекущийМассивСайтов[0]; 
		КонецЕсли;
		
		МассивСайтов = Новый Массив;
		МассивСайтов.Добавить(Сайт);
		
		Настройки			= РегистрыСведений.b24_НастройкиИнтеграций.ПолучитьНастройкиПоМассивуСайтов(МассивСайтов);
		НастройкиСайта		= Настройки[Сайт];
		
		НачатьТранзакцию();
		
		Попытка
			
			Если ЗначениеЗаполнено(ТекущийСайт) Тогда 
				РегистрыСведений.b24_ИсторияОбменаОбъектов.Записать(ТекущийСайт, Задача, Перечисления.b24_СобытияОбмена.ПередачаЗадачиВДругоеПодразделение);
			КонецЕсли;
						
			//Изменить сайт в РС b24_ЗаблокированныеОбъектыДляЗагрузки
			РегистрыСведений.b24_ЗаблокированныеОбъектыДляЗагрузки.ИзменитьСайт(Сайт, Задача);  
			
			//Изменить сайт в РС b24_ВыгружаемыеОбъекты
			РегистрыСведений.b24_ВыгружаемыеОбъекты.ИзменитьСайт(Сайт, Задача);  
			
			//Изменить сайт в РС b24_ИдентификаторыОбъектов 
			РегистрыСведений.b24_ИдентификаторыОбъектов.ИзменитьСайт(Сайт, Задача);  
			
			//Изменить сайт в РС b24_СостоянияОбменаЗадач 
			РегистрыСведений.b24_СостоянияОбменаЗадач.ИзменитьСайт(Сайт, Задача);  
			
			//Изменить подразделение в задаче
			ЗадачаОбъект 								= Задача.ПолучитьОбъект();
			ЗадачаОбъект.Статус							= НастройкиСайта.СтатусПоУмолчанию; 
			ЗадачаОбъект.Исполнитель					= Неопределено;
			ЗадачаОбъект.b24_ПодразделениеИсполнитель 	= НастройкиСайта.Подразделение; 
			ЗадачаОбъект.Записать();
			
			//Заменить на портале отдел и теги 
			TASKID	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "НомерВнешнейЗаявки");
			TASKID	= Формат(TASKID, "ЧГ=0"); 
			
			Если ЗначениеЗаполнено(TASKID) Тогда 
				
				ДанныеОбновления 			= Новый Соответствие();
				
				ОбязательныеРеквизитыЗадачи = НастройкиСайта.ПараметрыПодключения["ОбязательныеРеквизитыЗадачи"]; 
				ФильтрыЗадачи				= НастройкиСайта.ПараметрыПодключения["ФильтрыЗадачи"]; 
				
				Если ОбязательныеРеквизитыЗадачи <> Неопределено
					И ОбязательныеРеквизитыЗадачи["GROUP_ID"] <> Неопределено Тогда 
					ДанныеОбновления["GROUP_ID"] = ОбязательныеРеквизитыЗадачи["GROUP_ID"];
				КонецЕсли;
				
				Если ФильтрыЗадачи <> Неопределено Тогда 
					
					МассивТегов = Новый Массив;
					
					Для Каждого СтрокаФильтр Из ФильтрыЗадачи Цикл 
						Если СтрокаФильтр.Ключ = "TAG"
							И СтрокаФильтр.ВидСравнения = Перечисления.b24_ВидСравнения.Равно Тогда 
							МассивТегов.Добавить(СтрокаФильтр.Значение);	
						КонецЕсли;
					КонецЦикла;
					
					Если МассивТегов.Количество() > 0 Тогда 
						ДанныеОбновления["TAGS"] = МассивТегов;
					КонецЕсли;
					
				КонецЕсли;  
				
				СтатусОбновления = ПолучитьЧисловоеЗначениеСтатуса(НастройкиСайта.СтатусПоУмолчанию, НастройкиСайта.Статусы);
				
				Если СтатусОбновления <> Неопределено Тогда
					
					ДанныеОбновления["status"] = СтатусОбновления;    
					
					Если МассивОбменаСтатусами.Найти(ДанныеОбновления["status"]) = Неопределено Тогда 
						ДанныеОбновления.Удалить("status");	
					КонецЕсли;
					
				КонецЕсли;
				
				РезультатВыполнения = b24_API.Задачи_ОбновитьЗадачу(TASKID, ДанныеОбновления,, НастройкиСайта.ПараметрыПодключения);  
				
				Если РезультатВыполнения = Неопределено Тогда 
					
					Сообщение = "Не удалось изменить задачу";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
					
					ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ПередатьЗадачу", 
					УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.узЗадачи, Задача, Сообщение); 
					
				КонецЕсли;			
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
			Результат = Истина;
			
		Исключение
			
			ОтменитьТранзакцию();	
			
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции 

Процедура ПроверитьВозможностьПередачиЗадачи(Задача, Сайт, Отказ)

	Если Не ЗначениеЗаполнено(Задача) Тогда 
		
		Сообщение = "Не заполнен обязательный параметр ""Задача""";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
		
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ПроверитьВозможностьПередачиЗадачи", 
		УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.узЗадачи, Задача, Сообщение); 
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сайт) Тогда 
		
		Сообщение = "Не заполнен обязательный параметр ""Сайт""";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
		
		ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ПроверитьВозможностьПередачиЗадачи", 
		УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.узЗадачи, Задача, Сообщение); 
		
	КонецЕсли;  
	
	Если Не Отказ Тогда 
		
		ВидСтатуса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Статус.ВидСтатуса");   
		
		Если ВидСтатуса = Справочники.узВидыСтатусов.Готово Тогда 
			
			Сообщение = "Задача завершена в 1С. Смена статуса не возможна";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
			
			ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ПроверитьВозможностьПередачиЗадачи", 
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.узЗадачи, Задача, Сообщение);  
			
		КонецЕсли;
		
		МассивСайтов = РегистрыСведений.b24_СостоянияОбменаЗадач.ПолучитьМассивСайтовЗадачи(Задача);
		
		Если МассивСайтов.Количество() > 0 Тогда 
			
			ТекущийСайт = МассивСайтов[0];
			
			Если ТекущийСайт = Сайт Тогда 
				
				Сообщение = "Текущий сайт не отличается от выбранного";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
				
				ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ПроверитьВозможностьПередачиЗадачи", 
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.узЗадачи, Задача, Сообщение); 
				
			КонецЕсли;
			
			//проверить на портале что задача не завершена
			Попытка
				
				Настройки			= РегистрыСведений.b24_НастройкиИнтеграций.ПолучитьНастройкиПоМассивуСайтов(МассивСайтов);
				НастройкиСайта		= Настройки[ТекущийСайт];
				
				ДанныеСсылки		= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "НомерВнешнейЗаявки");
				TASKID				= ДанныеСсылки.НомерВнешнейЗаявки;
				TASKID				= Формат(TASKID, "ЧГ=0");
				
				ДанныеБитрикса 		= b24_API.Задачи_ПолучитьЗадачу(TASKID, НастройкиСайта.ПараметрыПодключения); 
				Статус				= ПолучитьСтатусЗадачи(ДанныеБитрикса.status, НастройкиСайта.Статусы);
				
				Если ЗначениеЗаполнено(Статус) Тогда 
					
					ВидСтатуса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статус, "ВидСтатуса");
					
					Если ВидСтатуса = Справочники.узВидыСтатусов.Готово Тогда 
						
						Сообщение = "Задача завершена на портале. Смена статуса не возможна";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
						
						ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ПроверитьВозможностьПередачиЗадачи", 
						УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.узЗадачи, Задача, Сообщение);
						
					КонецЕсли;
				КонецЕсли;
				
			Исключение
				
				Сообщение = "Не удалось получить текущий статус задачи на портале";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
				
				ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ПроверитьВозможностьПередачиЗадачи", 
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.узЗадачи, Задача, Сообщение); 
				
			КонецПопытки; 		
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти 

#Область ВыгрузкаОбязательныхРеквизитов

Процедура ВыполнитьВыгрузкуОбязательныхРеквизитов(Сайт, Кэш, Отказ) Экспорт 
	
	Настройки				= Кэш.Настройки[Сайт];
	ОбязательныеРеквизиты 	= Настройки.ПараметрыПодключения["ОбязательныеРеквизитыЗадачи"];
	Фильтры 				= Настройки.ПараметрыПодключения["ФильтрыЗадачи"];
	
	//поскольку наложение нескольких фильтров объединено логическим И, то потребуется проходит каждый обязательный реквизит
	Для Каждого ОбязательныйРеквизит Из ОбязательныеРеквизиты Цикл 
		
		ТаблицаФильтров = ИнициализироватьТаблицуФильтров();
		ДобавитьФильтр(ТаблицаФильтров, ОбязательныйРеквизит.Ключ, ОбязательныйРеквизит.Значение, Перечисления.b24_ВидСравнения.НеРавно);
		
		Для Каждого СтрокаФильтр Из Фильтры Цикл 
			ДобавитьФильтр(ТаблицаФильтров, СтрокаФильтр.Ключ, СтрокаФильтр.Значение, СтрокаФильтр.ВидСравнения);
		КонецЦикла;
		
		Настройки.ПараметрыПодключения.Вставить("ФильтрыЗадачи", ТаблицаФильтров);
		
		СтруктураЗадач = b24_API.Задачи_ВсеЗадачи(Настройки.ПараметрыПодключения); 
		
		Если СтруктураЗадач <> Неопределено Тогда 
			Для Каждого ДанныеБитрикс Из СтруктураЗадач.tasks Цикл 
				
				РезультатВыгрузки	= Новый Структура("Результат, Сообщение", Истина, СтрШаблон("Не удалось выгрузить обязательный реквизит для задачи - %1", ДанныеБитрикс.id));
				
				ВыгрузитьОбязательныеРеквизитыЗадачи(ДанныеБитрикс, ОбязательныеРеквизиты, Настройки, Кэш, РезультатВыгрузки);   
				
				Если РезультатВыгрузки.Результат Тогда 
					
					ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ВыполнитьВыгрузкуОбязательныхРеквизитов", 
					УровеньЖурналаРегистрации.Информация, , ДанныеБитрикс.id, СтрШаблон("Выгружены обязательные реквизиты по задаче - %1", ДанныеБитрикс.id));
					
				Иначе 
					
					Отказ = Истина;
					ЗаписьЖурналаРегистрации("Расширения.ИнтеграцияБитрикс24.ВыполнитьВыгрузкуОбязательныхРеквизитов", 
					УровеньЖурналаРегистрации.Ошибка, , ДанныеБитрикс.id, РезультатВыгрузки.Сообщение);
					
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли; 
	КонецЦикла; 
	
	Настройки.ПараметрыПодключения.Вставить("ФильтрыЗадачи", Фильтры);
	
КонецПроцедуры

Процедура ВыгрузитьОбязательныеРеквизитыЗадачи(ДанныеБитрикс, ОбязательныеРеквизиты, Настройки, Кэш, РезультатВыгрузки)
	
	//получаем данные задачи
	//сравнием список полей для обмена, если поле изменено по состянию битрикса, то добавлем в список обновления для битрикса
	ДанныеОбновления 	= Новый Соответствие();
	
	Для Каждого ОбязательныйРеквизит Из ОбязательныеРеквизиты Цикл 
		
		ОбновлятьРеквизит						= Ложь;
		ИмяРеквизитаОбновления 					= СтрЗаменить(ОбязательныйРеквизит.Ключ, "_", "");
		ЗначениеБитрикс							= ДанныеБитрикс[ИмяРеквизитаОбновления]; 
		ЗначениеОбязательныйРеквизит 			= ОбязательныйРеквизит.Значение;
		
		Если ТипЗнч(ЗначениеБитрикс) = Тип("Строка") Тогда 
			ЗначениеБитриксЭтоЧисло				= СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеБитрикс); 
		ИначеЕсли ТипЗнч(ЗначениеБитрикс) = Тип("Число") Тогда 
			ЗначениеБитриксЭтоЧисло				= Истина; 
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеОбязательныйРеквизит) = Тип("Строка") Тогда 
			ЗначениеОбязательныйРеквизитЭтоЧисло = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеБитрикс);
		ИначеЕсли ТипЗнч(ЗначениеОбязательныйРеквизит) = Тип("Число") Тогда 
			ЗначениеОбязательныйРеквизитЭтоЧисло = Истина; 
		КонецЕсли; 
		
		Если ЗначениеБитриксЭтоЧисло 
			И ЗначениеОбязательныйРеквизитЭтоЧисло Тогда 
			ОбновлятьРеквизит = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеБитрикс) <> СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеОбязательныйРеквизит);	
		Иначе 
			ОбновлятьРеквизит = ЗначениеБитрикс <> ЗначениеОбязательныйРеквизит;	
		КонецЕсли;
		
		Если ОбновлятьРеквизит Тогда 
			ДанныеОбновления.Вставить(ОбязательныйРеквизит.Ключ, ОбязательныйРеквизит.Значение);	
		КонецЕсли;		
	КонецЦикла;
	
	Если ДанныеОбновления.Количество() > 0 Тогда 
		
		Результат = b24_API.Задачи_ОбновитьЗадачу(ДанныеБитрикс.id, ДанныеОбновления, Ложь, Настройки.ПараметрыПодключения);   
		
		Если Результат = Неопределено Тогда 
			
			РезультатВыгрузки.Результат = Ложь;
			РезультатВыгрузки.Сообщение = СтрШаблон("%1%2%3", РезультатВыгрузки.Сообщение, Символы.ПС, "Не удалось выгрузить обязательные реквизиты задачи");  
			
		КонецЕсли;			
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьGUID(GUIDБитрикс) Экспорт 
	
	GUID = GUIDБитрикс;
	GUID = СтрЗаменить(GUID, "{", "");
	GUID = СтрЗаменить(GUID, "}", "");
	GUID = Новый УникальныйИдентификатор(GUID);
	
	Возврат GUID;
	
КонецФункции

Функция ПолучитьСтатусЗадачи(СтатусБитрикс, НастройкиСтатусов)
	
	СтатусБитриксЧисло 	= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтатусБитрикс);
	Статус 				= Справочники.узСтатусыЗадачи.ПустаяСсылка();
	
	Если НастройкиСтатусов <> Неопределено Тогда 
		
		ДанныеСтатуса 	= НастройкиСтатусов[СтатусБитриксЧисло];
		Статус 			= ?(ДанныеСтатуса = Неопределено Или ДанныеСтатуса.Статус = Неопределено, Справочники.узСтатусыЗадачи.Зарегистрирована, ДанныеСтатуса.Статус);
		
	Иначе 
		
		Если СтатусБитриксЧисло = - 2 
			Или СтатусБитриксЧисло = 1 
			Или СтатусБитриксЧисло = 2 Тогда 
			
			Статус = Справочники.узСтатусыЗадачи.Зарегистрирована;
			
		ИначеЕсли СтатусБитриксЧисло = 3 Тогда 
			Статус = Справочники.узСтатусыЗадачи.ВПроцессеВыполнения;
		ИначеЕсли СтатусБитриксЧисло = 4 Тогда 
			Статус = Справочники.узСтатусыЗадачи.НаТестированииПоказПользователям;
		ИначеЕсли СтатусБитриксЧисло = 5 Тогда 
			Статус = Справочники.узСтатусыЗадачи.Готово;
		ИначеЕсли СтатусБитриксЧисло = 6 Тогда 
			Статус = Справочники.узСтатусыЗадачи.Отложена;
		ИначеЕсли СтатусБитриксЧисло = 7 Тогда 
			Статус = Справочники.узСтатусыЗадачи.Отменена;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Статус
	
КонецФункции 

Функция ЗагружатьСтатус(СтатусБитрикс, НастройкиСтатусов)
	
	Загружать 			= Истина;   
	СтатусБитриксЧисло 	= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтатусБитрикс); 
	
	Если НастройкиСтатусов <> Неопределено Тогда 
		
		ДанныеСтатуса 	= НастройкиСтатусов[СтатусБитриксЧисло];
		Загружать		= ?(ДанныеСтатуса = Неопределено, Загружать, ДанныеСтатуса.ЗагружатьИзБитрикс24);
		
	КонецЕсли;	
	
	Возврат Загружать
	
КонецФункции

Функция ПолучитьЧисловоеЗначениеСтатуса(Статус, НастройкиСтатусов)

	Результат = Неопределено;
	
	Для Каждого Элемент Из НастройкиСтатусов Цикл 
		Если Элемент.Значение.Статус = Статус Тогда 
			Результат = Формат(Элемент.Ключ, "ЧГ=0");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции   

Функция ПолучитьВажностьЗадачи(ВажностьБитрикс)
	
	ВажностьБитриксЧисло 	= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ВажностьБитрикс);
	Важность 				= Справочники.узВариантыВажностиЗадачи.ПустаяСсылка();
	
	Если ВажностьБитриксЧисло = 0 Тогда 
		Важность = Справочники.узВариантыВажностиЗадачи.Низкая;
	ИначеЕсли ВажностьБитриксЧисло = 1 Тогда 
		Важность = Справочники.узВариантыВажностиЗадачи.Обычная;
	ИначеЕсли ВажностьБитриксЧисло = 2 Тогда 
		Важность = Справочники.узВариантыВажностиЗадачи.Высокая;
	КонецЕсли;	
	
	Возврат Важность
	
КонецФункции

Функция ПолучитьДанныеОписанияЗадачи(Описание)
	
	Результат 							= Новый Структура("ТекстСодержания, ФорматированныйДокумент");
	Результат.ТекстСодержания 			= СокрЛП(Описание);
	Результат.ФорматированныйДокумент 	= Обработки.b24_ПрееобразованиеBBКодов.ДанныеПреобразованияBBКодаВФорматированныйДокумент(Описание).ФорматированныйДокумент;
	
	Возврат Результат
	
КонецФункции  

Функция ПолучитьПользователя1С(Идентификатор, ТаблицаПользователейБитрикс, СоответствиеПользователей1С, ПолеСвязи = "EMAIL")
	
	Пользователь 	= Справочники.Пользователи.ПустаяСсылка();
	ДанныеБитрикс	= Неопределено; 
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда 
		ДанныеБитрикс = ТаблицаПользователейБитрикс.Найти(Идентификатор, "ID");
	КонецЕсли;
	
	Если ДанныеБитрикс <> Неопределено Тогда 
		Пользователь = СоответствиеПользователей1С[ДанныеБитрикс[ПолеСвязи]];	
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда 
		Пользователь 	= Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;

	Возврат Пользователь
	
КонецФункции   

Функция ПолучитьПользователейБитрикса(Кэш, Сайт, Настройки)
	
	ТаблицаПользователей = Новый ТаблицаЗначений();
	
	Если Не Кэш.Свойство("ДанныеСайта") Тогда 
		Кэш.Вставить("ДанныеСайта", Новый Соответствие);	
	КонецЕсли;
	
	ДанныеСайта = Кэш.ДанныеСайта[Сайт];
	
	Если ДанныеСайта = Неопределено Тогда 
		
		СтруктураПользователи 	= b24_API.Пользователи_ВсеПользователи(Настройки.ПараметрыПодключения);  
		
		Если СтруктураПользователи <> Неопределено Тогда 
			ТаблицаПользователей = СтруктураПользователи.result;	
		КонецЕсли; 
		
		Кэш.ДанныеСайта[Сайт] 	= Новый Структура("ТаблицаПользователей", ТаблицаПользователей);
		ДанныеСайта 			= Кэш.ДанныеСайта[Сайт];  
		
	Иначе 
		
		ТаблицаПользователей = ДанныеСайта.ТаблицаПользователей;	
		
	КонецЕсли;

	Возврат ТаблицаПользователей
	
КонецФункции 

Функция ПолучитьIDПользователя(Пользователь, ТаблицаПользователей)
	
	Результат 	= Неопределено;
	Емайл 		= УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Пользователь, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	
	Если ЗначениеЗаполнено(Емайл) Тогда 
		
		ИскомыеСтроки = ТаблицаПользователей.НайтиСтроки(Новый Структура("EMAIL", Емайл));  
		
		Если ИскомыеСтроки.Количество() > 0 Тогда 
			Результат = ИскомыеСтроки[0].ID;	
		КонецЕсли;					
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

Функция ИнициализироватьТаблицуФильтров() Экспорт 
	
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("Ключ");
	ТаблицаФильтров.Колонки.Добавить("ВидСравнения");
	ТаблицаФильтров.Колонки.Добавить("Значение");

	Возврат ТаблицаФильтров
	
КонецФункции  

Функция ДобавитьФильтр(Таблица, Ключ, Значение, ТипСравнения = Неопределено) Экспорт
	
	ЗначениеРезультат = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТипСравнения) Тогда 
		ТипСравненияИтог = Перечисления.b24_ВидСравнения.Равно;	
	Иначе 
		ТипСравненияИтог = ТипСравнения;
	КонецЕсли;
	
	//если фильтр уже есть, то преобразуем в массив значений
	ИскомыеСтроки = Таблица.НайтиСтроки(Новый Структура("Ключ", Ключ));
	
	Если ИскомыеСтроки.Количество() > 0 Тогда 
		СтрокаФильтр = ИскомыеСтроки[0];
		ЗначениеРезультат = СтрокаФильтр.Значение; 
	Иначе 
		СтрокаФильтр = Таблица.Добавить();
	КонецЕсли;                            
	
	Если ЗначениеЗаполнено(ЗначениеРезультат) Тогда 
		
		Если ТипЗнч(ЗначениеРезультат) = Тип("Массив") Тогда 
			ЗначениеРезультат.Добавить(Значение);	
		Иначе 
			
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(ЗначениеРезультат);
			МассивЗначений.Добавить(Значение);
			
			ЗначениеРезультат = МассивЗначений;
			
		КонецЕсли;
		
	Иначе 
		ЗначениеРезультат = Значение;	
	КонецЕсли;                       
	
	СтрокаФильтр.Ключ 			= Ключ;
	СтрокаФильтр.Значение 		= ЗначениеРезультат;
	СтрокаФильтр.ВидСравнения 	= ТипСравненияИтог;
	
КонецФункции	

Функция ВСтрокеТолькоДопустимыеСимволы(Строка)
	
	Результат = Истина;
	
	Цифры 				= "0123456789";
	Латиница 			= "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	Кириллица 			= "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЪЬЭЮЯабвгдежзийклмнопрстуфхцчшщыъьэюя";
	ДопустимыеСимволы 	= Цифры + Латиница + Кириллица + "_"; 
	
	Результат 			= СтрокаСодержитТолькоДопустимыеСимволы(Строка, ДопустимыеСимволы);
	
	Возврат Результат
	
КонецФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(Строка, ДопустимыеСимволы)
	МассивСимволов = Новый Массив;
	Для Позиция = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		МассивСимволов.Добавить(Сред(ДопустимыеСимволы,Позиция,1));
	КонецЦикла;
	
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Если МассивСимволов.Найти(Сред(Строка, Позиция, 1)) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьПодразделениеПользователя(Данные)

	Результат 						= Справочники.b24_Подразделения.ПустаяСсылка();
	ID_ПодразделениеПользователя 	= Неопределено; 
	
	Если Данные.UF_DEPARTMENT.Количество() > 0 Тогда 
		ID_ПодразделениеПользователя = Данные.UF_DEPARTMENT[0];
	КонецЕсли;                                                             
	
	Если ЗначениеЗаполнено(ID_ПодразделениеПользователя) Тогда 
		Результат = Справочники.b24_Подразделения.НайтиПоРеквизиту("ID", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ID_ПодразделениеПользователя));	
	КонецЕсли;    
	
	Возврат Результат
	
КонецФункции

Функция ИспользоватьОбмен(Настройки, Объект, Режим = "Загрузка")

	Результат = Ложь;
	
	Идентификатор 	= ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Объект);
	Результат 		= Настройки.ПараметрыПодключения["ОбъектыОбмена"][Идентификатор][Режим];
	
	Возврат Результат	
	
КонецФункции

Функция ЭтоЗаблокированныйОбъект(Сайт, Объект)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	b24_ЗаблокированныеОбъектыДляЗагрузки.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.b24_ЗаблокированныеОбъектыДляЗагрузки КАК b24_ЗаблокированныеОбъектыДляЗагрузки
		|ГДЕ
		|	b24_ЗаблокированныеОбъектыДляЗагрузки.Сайт = &Сайт
		|	И b24_ЗаблокированныеОбъектыДляЗагрузки.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Сайт", Сайт);
	
	Результат = Не Запрос.Выполнить().Пустой();
		
	Возврат Результат
	
КонецФункции

Функция ПолучитьДанныеКонтрагентовПоМассиву(Сайт, Массив)
	
	СоответствиеРеквизитов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	узКонтрагенты.Ссылка КАК Ссылка,
		|	узКонтрагенты.Наименование КАК Наименование,
		|	узКонтрагенты.b24_ID КАК b24_ID,
		|	узКонтрагенты.b24_Уволен КАК b24_Уволен,
		|	узКонтрагенты.b24_Подразделение КАК b24_Подразделение,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(b24_ИдентификаторыОбъектов.ID, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьИдентификатор,
		|	ЕСТЬNULL(узКонтрагентыКонтактнаяИнформация.АдресЭП, """") КАК Емайл
		|ИЗ
		|	Справочник.узКонтрагенты КАК узКонтрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.b24_ИдентификаторыОбъектов КАК b24_ИдентификаторыОбъектов
		|		ПО (b24_ИдентификаторыОбъектов.Ссылка = узКонтрагенты.Ссылка)
		|			И (b24_ИдентификаторыОбъектов.Сайт = &Сайт)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.узКонтрагенты.КонтактнаяИнформация КАК узКонтрагентыКонтактнаяИнформация
		|		ПО узКонтрагенты.Ссылка = узКонтрагентыКонтактнаяИнформация.Ссылка
		|			И (узКонтрагентыКонтактнаяИнформация.Вид = &ВидКонтактнойИнформации)
		|ГДЕ
		|	узКонтрагенты.Ссылка В(&Массив)";
	
	Запрос.УстановитьПараметр("Массив", Массив);
	Запрос.УстановитьПараметр("Сайт", Сайт);
	Запрос.УстановитьПараметр("ВидКонтактнойИнформации", Справочники.ВидыКонтактнойИнформации.узEmailКонтрагенты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Данные = Новый Структура();
		Данные.Вставить("b24_ID", ВыборкаДетальныеЗаписи.b24_ID);
		Данные.Вставить("b24_Уволен", ВыборкаДетальныеЗаписи.b24_Уволен);
		Данные.Вставить("b24_Подразделение", ВыборкаДетальныеЗаписи.b24_Подразделение);
		Данные.Вставить("ЕстьИдентификатор", ВыборкаДетальныеЗаписи.ЕстьИдентификатор);
		Данные.Вставить("Емайл", ВыборкаДетальныеЗаписи.Емайл);
		Данные.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
		
		СоответствиеРеквизитов[ВыборкаДетальныеЗаписи.Ссылка] = Данные;
		
	КонецЦикла;
	
	Возврат СоответствиеРеквизитов
	
КонецФункции

#КонецОбласти
